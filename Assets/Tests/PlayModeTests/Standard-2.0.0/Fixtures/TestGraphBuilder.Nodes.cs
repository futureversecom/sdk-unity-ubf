// Copyright (c) 2025, Futureverse Corporation Limited. All rights reserved.
//
// WARNING - DO NOT EDIT
// This file was generated by fv-ubf-standard cs-gen.ts.
//

using System.Collections.Generic;
using System.Linq;

// ReSharper disable RedundantEmptyObjectOrCollectionInitializer
// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable InconsistentNaming

namespace UnitTests.PlayModeTests.Utils
{
        public partial class TestGraphBuilder
        {

        public static Node First<T>(string id, string typeT)
            => new()
            {
                Id = id,
                Type = "First",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Element",
                        Type = typeT,
                    },
                },
        };

        public static Node Length<T>(string id, string typeT)
            => new()
            {
                Id = id,
                Type = "Length",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Length",
                        Type = "int",
                    },
                },
        };

        public static Node AtIndex<T>(string id, string typeT, int Index = 0)
            => new()
            {
                Id = id,
                Type = "AtIndex",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Index",
                        Type = "int",
                        Value = Index,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Element",
                        Type = typeT,
                    },
                },
        };

        public static Node Pick<T>(string id, string typeT, T True = default, T False = default, bool Condition = false)
            => new()
            {
                Id = id,
                Type = "Pick",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "True",
                        Type = typeT,
                        Value = True,
                    },
                    new()
                    {
                        Id = "False",
                        Type = typeT,
                        Value = False,
                    },
                    new()
                    {
                        Id = "Condition",
                        Type = "boolean",
                        Value = Condition,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = typeT,
                    },
                },
        };

        public static Node ForEach<T>(string id, string typeT)
            => new()
            {
                Id = id,
                Type = "ForEach",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Loop",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Element",
                        Type = typeT,
                    },
                    new()
                    {
                        Id = "Index",
                        Type = "int",
                    },
                },
        };

        public static Node MakeArray<T>(string id, string typeT, List<T> Element = null)
            => new()
            {
                Id = id,
                Type = "MakeArray",
                Inputs = new List<Pin>
                {
                }
                .Concat(
                    (Element ?? new List<T>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Element.{index + 1}",
                            Type = typeT,
                            Value = i,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                    },
                },
        };

        public static Node Set(string id, object BindingName = null, object Value = null)
            => new()
            {
                Id = id,
                Type = "Set",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "BindingName",
                        Type = "unknown",
                        Value = BindingName,
                    },
                    new()
                    {
                        Id = "Value",
                        Type = "unknown",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node Get<T>(string id, string typeT, object BindingName = null)
            => new()
            {
                Id = id,
                Type = "Get",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "BindingName",
                        Type = "unknown",
                        Value = BindingName,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                    },
                },
        };

        public static Node SetOutputs(string id, Dictionary<string, object> InBindingID = null)
            => new()
            {
                Id = id,
                Type = "SetOutputs",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                }
                .Concat(
                    (InBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node Entry(string id)
            => new()
            {
                Id = id,
                Type = "Entry",
                Inputs = new List<Pin>
                {
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node DebugLog(string id, string Message = "")
            => new()
            {
                Id = id,
                Type = "DebugLog",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Message",
                        Type = "string",
                        Value = Message,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node BoolLiteral(string id, bool Value = false)
            => new()
            {
                Id = id,
                Type = "BoolLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "boolean",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Bool",
                        Type = "boolean",
                    },
                },
        };

        public static Node IntLiteral(string id, int Value = 0)
            => new()
            {
                Id = id,
                Type = "IntLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "int",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Int",
                        Type = "int",
                    },
                },
        };

        public static Node FloatLiteral(string id, float Value = 0f)
            => new()
            {
                Id = id,
                Type = "FloatLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "float",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Float",
                        Type = "float",
                    },
                },
        };

        public static Node ColorLiteral(string id, float R = 0f, float G = 0f, float B = 0f, float A = 0f)
            => new()
            {
                Id = id,
                Type = "ColorLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "R",
                        Type = "float",
                        Value = R,
                    },
                    new()
                    {
                        Id = "G",
                        Type = "float",
                        Value = G,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "float",
                        Value = B,
                    },
                    new()
                    {
                        Id = "A",
                        Type = "float",
                        Value = A,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Color",
                        Type = "Color",
                    },
                },
        };

        public static Node StringLiteral(string id, string Value = "")
            => new()
            {
                Id = id,
                Type = "StringLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "string",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                    },
                },
        };

        public static Node And(string id, bool A = false, bool B = false)
            => new()
            {
                Id = id,
                Type = "And",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "boolean",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Or(string id, bool A = false, bool B = false)
            => new()
            {
                Id = id,
                Type = "Or",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "boolean",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Xor(string id, bool A = false, bool B = false)
            => new()
            {
                Id = id,
                Type = "Xor",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "boolean",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Not(string id, bool Value = false)
            => new()
            {
                Id = id,
                Type = "Not",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "boolean",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Branch(string id, bool Condition = false)
            => new()
            {
                Id = id,
                Type = "Branch",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Condition",
                        Type = "boolean",
                        Value = Condition,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "True",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "False",
                        Type = "exec",
                    },
                },
        };

        public static Node Equals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Equals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node NotEquals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "NotEquals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node GreaterThan<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "GreaterThan",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node LessThan<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "LessThan",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node GreaterThanOrEquals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "GreaterThanOrEquals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node LessThanOrEquals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "LessThanOrEquals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node IsNull<T>(string id, string typeT, T Value = default)
            => new()
            {
                Id = id,
                Type = "IsNull",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "IsNull",
                        Type = "boolean",
                    },
                },
        };

        public static Node ApplyMaterial(string id, int MaterialIndex = 0, object Renderer = null, object Material = null)
            => new()
            {
                Id = id,
                Type = "ApplyMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "MaterialIndex",
                        Type = "int",
                        Value = MaterialIndex,
                    },
                    new()
                    {
                        Id = "Renderer",
                        Type = "MeshRenderer",
                        Value = Renderer,
                    },
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                        Value = Material,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node MakePBRMaterial(string id, string RenderMode = "", object AlphaTexture = null, bool UseAlphaTexture = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f)
            => new()
            {
                Id = id,
                Type = "MakePBRMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "RenderMode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "AlphaTexture",
                        Type = "Resource<Texture>",
                        Value = AlphaTexture,
                    },
                    new()
                    {
                        Id = "UseAlphaTexture",
                        Type = "boolean",
                        Value = UseAlphaTexture,
                    },
                    new()
                    {
                        Id = "DiffuseTexture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "BaseColor",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "UseAlpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "FresnelIOR",
                        Type = "float",
                        Value = FresnelIOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "UseEmission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "UseEmissiveTint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTexture",
                        Type = "Resource<Texture>",
                        Value = EmissiveTexture,
                    },
                    new()
                    {
                        Id = "EmissiveColorBoost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "EmissiveTint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTintBoost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "UseNormalMap",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "NormalTexture",
                        Type = "Resource<Texture>",
                        Value = NormalTexture,
                    },
                    new()
                    {
                        Id = "UseORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeSkinMaterial(string id, object GCLSTexture = null, object NormalTexture = null, object ORSTexture = null, string SkinColor = "#000000", string Redness = "#000000", string LipColor = "#000000", float SkinVariation = 0f, float DarkAreaHue = 0f, float DarkAreaSaturation = 0f, float DarkAreaValue = 0f, float RoughnessStrength = 0f, float AOStrength = 0f, object BuzzcutTexture = null, object StubbleTexture = null, object FrecklesTexture = null, object MolesTexture = null, object ScarsTexture = null, string HairColor = "#000000", string FreckleColor = "#000000", string MoleColor = "#000000", string ScarColor = "#000000", float StubbleGrowth = 0f, float StubbleContrast = 0f, float MoleNormalStrength = 0f, float ScarColorContrast = 0f, float ScarColorFalloff = 0f, float ScarNormalStrength = 0f)
            => new()
            {
                Id = id,
                Type = "MakeSkinMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "GCLSTexture",
                        Type = "Resource<Texture>",
                        Value = GCLSTexture,
                    },
                    new()
                    {
                        Id = "NormalTexture",
                        Type = "Resource<Texture>",
                        Value = NormalTexture,
                    },
                    new()
                    {
                        Id = "ORSTexture",
                        Type = "Resource<Texture>",
                        Value = ORSTexture,
                    },
                    new()
                    {
                        Id = "SkinColor",
                        Type = "Color",
                        Value = SkinColor,
                    },
                    new()
                    {
                        Id = "Redness",
                        Type = "Color",
                        Value = Redness,
                    },
                    new()
                    {
                        Id = "LipColor",
                        Type = "Color",
                        Value = LipColor,
                    },
                    new()
                    {
                        Id = "SkinVariation",
                        Type = "float",
                        Value = SkinVariation,
                    },
                    new()
                    {
                        Id = "DarkAreaHue",
                        Type = "float",
                        Value = DarkAreaHue,
                    },
                    new()
                    {
                        Id = "DarkAreaSaturation",
                        Type = "float",
                        Value = DarkAreaSaturation,
                    },
                    new()
                    {
                        Id = "DarkAreaValue",
                        Type = "float",
                        Value = DarkAreaValue,
                    },
                    new()
                    {
                        Id = "RoughnessStrength",
                        Type = "float",
                        Value = RoughnessStrength,
                    },
                    new()
                    {
                        Id = "AOStrength",
                        Type = "float",
                        Value = AOStrength,
                    },
                    new()
                    {
                        Id = "BuzzcutTexture",
                        Type = "Resource<Texture>",
                        Value = BuzzcutTexture,
                    },
                    new()
                    {
                        Id = "StubbleTexture",
                        Type = "Resource<Texture>",
                        Value = StubbleTexture,
                    },
                    new()
                    {
                        Id = "FrecklesTexture",
                        Type = "Resource<Texture>",
                        Value = FrecklesTexture,
                    },
                    new()
                    {
                        Id = "MolesTexture",
                        Type = "Resource<Texture>",
                        Value = MolesTexture,
                    },
                    new()
                    {
                        Id = "ScarsTexture",
                        Type = "Resource<Texture>",
                        Value = ScarsTexture,
                    },
                    new()
                    {
                        Id = "HairColor",
                        Type = "Color",
                        Value = HairColor,
                    },
                    new()
                    {
                        Id = "FreckleColor",
                        Type = "Color",
                        Value = FreckleColor,
                    },
                    new()
                    {
                        Id = "MoleColor",
                        Type = "Color",
                        Value = MoleColor,
                    },
                    new()
                    {
                        Id = "ScarColor",
                        Type = "Color",
                        Value = ScarColor,
                    },
                    new()
                    {
                        Id = "StubbleGrowth",
                        Type = "float",
                        Value = StubbleGrowth,
                    },
                    new()
                    {
                        Id = "StubbleContrast",
                        Type = "float",
                        Value = StubbleContrast,
                    },
                    new()
                    {
                        Id = "MoleNormalStrength",
                        Type = "float",
                        Value = MoleNormalStrength,
                    },
                    new()
                    {
                        Id = "ScarColorContrast",
                        Type = "float",
                        Value = ScarColorContrast,
                    },
                    new()
                    {
                        Id = "ScarColorFalloff",
                        Type = "float",
                        Value = ScarColorFalloff,
                    },
                    new()
                    {
                        Id = "ScarNormalStrength",
                        Type = "float",
                        Value = ScarNormalStrength,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeSkin02Material(string id, object BaseColorTexture = null, float AmbientOcclusion = 0f, string ColorTint = "#000000", object ORMTexture = null, float Metallic = 0f, float Roughness = 0f, object NormalTexture = null, float NormalStrength = 0f, bool FlipNormal = false, bool Fresnel = false, string FresnelColor = "#000000", float FresnelPower = 0f, bool UseEmission = false, string EmissiveTint = "#000000", float EmissiveStrength = 0f, object EmissiveTexture = null, object FreckleTexture = null, float FreckleOpacity = 0f, string FreckleTint = "#000000", object TattooTexture = null, string TattooTint = "#000000", object BeardTexture = null, float BeardOpacity = 0f, string BeardTint = "#000000", object FacePaintTexture = null, float FacePaintOpacity = 0f)
            => new()
            {
                Id = id,
                Type = "MakeSkin02Material",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "BaseColorTexture",
                        Type = "Resource<Texture>",
                        Value = BaseColorTexture,
                    },
                    new()
                    {
                        Id = "AmbientOcclusion",
                        Type = "float",
                        Value = AmbientOcclusion,
                    },
                    new()
                    {
                        Id = "ColorTint",
                        Type = "Color",
                        Value = ColorTint,
                    },
                    new()
                    {
                        Id = "ORMTexture",
                        Type = "Resource<Texture>",
                        Value = ORMTexture,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "NormalTexture",
                        Type = "Resource<Texture>",
                        Value = NormalTexture,
                    },
                    new()
                    {
                        Id = "NormalStrength",
                        Type = "float",
                        Value = NormalStrength,
                    },
                    new()
                    {
                        Id = "FlipNormal",
                        Type = "boolean",
                        Value = FlipNormal,
                    },
                    new()
                    {
                        Id = "Fresnel",
                        Type = "boolean",
                        Value = Fresnel,
                    },
                    new()
                    {
                        Id = "FresnelColor",
                        Type = "Color",
                        Value = FresnelColor,
                    },
                    new()
                    {
                        Id = "FresnelPower",
                        Type = "float",
                        Value = FresnelPower,
                    },
                    new()
                    {
                        Id = "UseEmission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "EmissiveTint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveStrength",
                        Type = "float",
                        Value = EmissiveStrength,
                    },
                    new()
                    {
                        Id = "EmissiveTexture",
                        Type = "Resource<Texture>",
                        Value = EmissiveTexture,
                    },
                    new()
                    {
                        Id = "FreckleTexture",
                        Type = "Resource<Texture>",
                        Value = FreckleTexture,
                    },
                    new()
                    {
                        Id = "FreckleOpacity",
                        Type = "float",
                        Value = FreckleOpacity,
                    },
                    new()
                    {
                        Id = "FreckleTint",
                        Type = "Color",
                        Value = FreckleTint,
                    },
                    new()
                    {
                        Id = "TattooTexture",
                        Type = "Resource<Texture>",
                        Value = TattooTexture,
                    },
                    new()
                    {
                        Id = "TattooTint",
                        Type = "Color",
                        Value = TattooTint,
                    },
                    new()
                    {
                        Id = "BeardTexture",
                        Type = "Resource<Texture>",
                        Value = BeardTexture,
                    },
                    new()
                    {
                        Id = "BeardOpacity",
                        Type = "float",
                        Value = BeardOpacity,
                    },
                    new()
                    {
                        Id = "BeardTint",
                        Type = "Color",
                        Value = BeardTint,
                    },
                    new()
                    {
                        Id = "FacePaintTexture",
                        Type = "Resource<Texture>",
                        Value = FacePaintTexture,
                    },
                    new()
                    {
                        Id = "FacePaintOpacity",
                        Type = "float",
                        Value = FacePaintOpacity,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeDecalMaterial(string id, string RenderMode = "", object AlphaTexture = null, bool UseAlphaTexture = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f, bool UseDecals = false, object DecalTexture = null, string TintBase = "#000000", float DarkenBase = 0f, float RoughBase = 0f, float MetalBase = 0f, float FlakesBase = 0f, string TintA = "#000000", float DarkenA = 0f, float RoughA = 0f, float MetalA = 0f, float FlakesA = 0f, string TintB = "#000000", float DarkenB = 0f, float RoughB = 0f, float MetalB = 0f, float FlakesB = 0f, string TintC = "#000000", float DarkenC = 0f, float RoughC = 0f, float MetalC = 0f, float FlakeC = 0f)
            => new()
            {
                Id = id,
                Type = "MakeDecalMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "RenderMode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "AlphaTexture",
                        Type = "Resource<Texture>",
                        Value = AlphaTexture,
                    },
                    new()
                    {
                        Id = "UseAlphaTexture",
                        Type = "boolean",
                        Value = UseAlphaTexture,
                    },
                    new()
                    {
                        Id = "DiffuseTexture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "BaseColor",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "UseAlpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "FresnelIOR",
                        Type = "float",
                        Value = FresnelIOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "UseEmission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "UseEmissiveTint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTexture",
                        Type = "Resource<Texture>",
                        Value = EmissiveTexture,
                    },
                    new()
                    {
                        Id = "EmissiveColorBoost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "EmissiveTint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTintBoost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "UseNormalMap",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "NormalTexture",
                        Type = "Resource<Texture>",
                        Value = NormalTexture,
                    },
                    new()
                    {
                        Id = "UseORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                    new()
                    {
                        Id = "UseDecals",
                        Type = "boolean",
                        Value = UseDecals,
                    },
                    new()
                    {
                        Id = "DecalTexture",
                        Type = "Resource<Texture>",
                        Value = DecalTexture,
                    },
                    new()
                    {
                        Id = "TintBase",
                        Type = "Color",
                        Value = TintBase,
                    },
                    new()
                    {
                        Id = "DarkenBase",
                        Type = "float",
                        Value = DarkenBase,
                    },
                    new()
                    {
                        Id = "RoughBase",
                        Type = "float",
                        Value = RoughBase,
                    },
                    new()
                    {
                        Id = "MetalBase",
                        Type = "float",
                        Value = MetalBase,
                    },
                    new()
                    {
                        Id = "FlakesBase",
                        Type = "float",
                        Value = FlakesBase,
                    },
                    new()
                    {
                        Id = "TintA",
                        Type = "Color",
                        Value = TintA,
                    },
                    new()
                    {
                        Id = "DarkenA",
                        Type = "float",
                        Value = DarkenA,
                    },
                    new()
                    {
                        Id = "RoughA",
                        Type = "float",
                        Value = RoughA,
                    },
                    new()
                    {
                        Id = "MetalA",
                        Type = "float",
                        Value = MetalA,
                    },
                    new()
                    {
                        Id = "FlakesA",
                        Type = "float",
                        Value = FlakesA,
                    },
                    new()
                    {
                        Id = "TintB",
                        Type = "Color",
                        Value = TintB,
                    },
                    new()
                    {
                        Id = "DarkenB",
                        Type = "float",
                        Value = DarkenB,
                    },
                    new()
                    {
                        Id = "RoughB",
                        Type = "float",
                        Value = RoughB,
                    },
                    new()
                    {
                        Id = "MetalB",
                        Type = "float",
                        Value = MetalB,
                    },
                    new()
                    {
                        Id = "FlakesB",
                        Type = "float",
                        Value = FlakesB,
                    },
                    new()
                    {
                        Id = "TintC",
                        Type = "Color",
                        Value = TintC,
                    },
                    new()
                    {
                        Id = "DarkenC",
                        Type = "float",
                        Value = DarkenC,
                    },
                    new()
                    {
                        Id = "RoughC",
                        Type = "float",
                        Value = RoughC,
                    },
                    new()
                    {
                        Id = "MetalC",
                        Type = "float",
                        Value = MetalC,
                    },
                    new()
                    {
                        Id = "FlakeC",
                        Type = "float",
                        Value = FlakeC,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeFurMaterial(string id, string RenderMode = "", object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f, object HeightMap = null, object IdMap = null)
            => new()
            {
                Id = id,
                Type = "MakeFurMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "RenderMode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "DiffuseTexture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "BaseColor",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "UseAlpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "FresnelIOR",
                        Type = "float",
                        Value = FresnelIOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "UseEmission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "UseEmissiveTint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTexture",
                        Type = "Resource<Texture>",
                        Value = EmissiveTexture,
                    },
                    new()
                    {
                        Id = "EmissiveColorBoost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "EmissiveTint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTintBoost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "UseNormalMap",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "NormalTexture",
                        Type = "Resource<Texture>",
                        Value = NormalTexture,
                    },
                    new()
                    {
                        Id = "UseORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                    new()
                    {
                        Id = "HeightMap",
                        Type = "Resource<Texture>",
                        Value = HeightMap,
                    },
                    new()
                    {
                        Id = "IdMap",
                        Type = "Resource<Texture>",
                        Value = IdMap,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeHairMaterial(string id, string RenderMode = "", object AlphaTexture = null, bool UseAlphaTexture = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f)
            => new()
            {
                Id = id,
                Type = "MakeHairMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "RenderMode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "AlphaTexture",
                        Type = "Resource<Texture>",
                        Value = AlphaTexture,
                    },
                    new()
                    {
                        Id = "UseAlphaTexture",
                        Type = "boolean",
                        Value = UseAlphaTexture,
                    },
                    new()
                    {
                        Id = "DiffuseTexture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "BaseColor",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "UseAlpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "FresnelIOR",
                        Type = "float",
                        Value = FresnelIOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "UseEmission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "UseEmissiveTint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTexture",
                        Type = "Resource<Texture>",
                        Value = EmissiveTexture,
                    },
                    new()
                    {
                        Id = "EmissiveColorBoost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "EmissiveTint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "EmissiveTintBoost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "UseNormalMap",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "NormalTexture",
                        Type = "Resource<Texture>",
                        Value = NormalTexture,
                    },
                    new()
                    {
                        Id = "UseORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node Add<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Add",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = typeT,
                    },
                },
        };

        public static Node Subtract<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Subtract",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = typeT,
                    },
                },
        };

        public static Node Multiply<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Multiply",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = typeT,
                    },
                },
        };

        public static Node GetJsonIntAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonIntAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "int",
                    },
                },
        };

        public static Node GetJsonFloatAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonFloatAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "float",
                    },
                },
        };

        public static Node GetJsonBoolAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonBoolAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node GetJsonStringAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonStringAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node GetJsonObjectAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonObjectAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "Json",
                    },
                },
        };

        public static Node GetJsonArrayAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonArrayAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "Array<Json>",
                    },
                },
        };

        public static Node DeserializeJson(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "DeserializeJson",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                    },
                    new()
                    {
                        Id = "Success",
                        Type = "boolean",
                    },
                },
        };

        public static Node ParseInt(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "ParseInt",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "int",
                    },
                },
        };

        public static Node ParseFloat(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "ParseFloat",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "float",
                    },
                },
        };

        public static Node ParseBool(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "ParseBool",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node MapValue<T, U>(string id, string typeT, string typeU, T Value = default, U Default = default, List<T> Input = null, List<U> Output = null)
            => new()
            {
                Id = id,
                Type = "MapValue",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                        Value = Value,
                    },
                    new()
                    {
                        Id = "Default",
                        Type = typeU,
                        Value = Default,
                    },
                }
                .Concat(
                    (Input ?? new List<T>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Input.{index + 1}",
                            Type = typeT,
                            Value = i,
                        }
                    )
                )
                .Concat(
                    (Output ?? new List<U>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Output.{index + 1}",
                            Type = typeU,
                            Value = i,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = typeU,
                    },
                },
        };

        public static Node BindMeshes(string id, object Rig = null)
            => new()
            {
                Id = id,
                Type = "BindMeshes",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Meshes",
                        Type = "Array<MeshRenderer>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Rig",
                        Type = "Rig",
                        Value = Rig,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node CreateSceneNode(string id, string Name = "", object Parent = null)
            => new()
            {
                Id = id,
                Type = "CreateSceneNode",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Name",
                        Type = "string",
                        Value = Name,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                    },
                },
        };

        public static Node SetSceneNodeEnabled(string id, object SceneNode = null, bool Enabled = false)
            => new()
            {
                Id = id,
                Type = "SetSceneNodeEnabled",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                    new()
                    {
                        Id = "Enabled",
                        Type = "boolean",
                        Value = Enabled,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node SpawnMesh(string id, object Mesh = null, object Parent = null, object Config = null)
            => new()
            {
                Id = id,
                Type = "SpawnMesh",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Mesh",
                        Type = "Resource<Mesh>",
                        Value = Mesh,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                    new()
                    {
                        Id = "Config",
                        Type = "MeshConfig",
                        Value = Config,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                    },
                    new()
                    {
                        Id = "Renderer",
                        Type = "MeshRenderer",
                    },
                },
        };

        public static Node SpawnModel(string id, object GLB = null, object Parent = null, object Config = null)
            => new()
            {
                Id = id,
                Type = "SpawnModel",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "GLB",
                        Type = "Resource<GLB>",
                        Value = GLB,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                    new()
                    {
                        Id = "Config",
                        Type = "MeshConfig",
                        Value = Config,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                    },
                    new()
                    {
                        Id = "Renderers",
                        Type = "Array<MeshRenderer>",
                    },
                },
        };

        public static Node SpawnModelWithLODs(string id, object Parent = null, object Config = null)
            => new()
            {
                Id = id,
                Type = "SpawnModelWithLODs",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Meshes",
                        Type = "Array<Resource<Mesh>>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                    new()
                    {
                        Id = "Config",
                        Type = "MeshConfig",
                        Value = Config,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                    },
                    new()
                    {
                        Id = "Renderer",
                        Type = "MeshRenderer",
                    },
                },
        };

        public static Node CreateMeshConfig<T>(string id, string typeT, T Resource = default, string ConfigKey = "")
            => new()
            {
                Id = id,
                Type = "CreateMeshConfig",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Resource",
                        Type = typeT,
                        Value = Resource,
                    },
                    new()
                    {
                        Id = "ConfigKey",
                        Type = "string",
                        Value = ConfigKey,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "MeshConfig",
                        Type = "MeshConfig",
                    },
                },
        };

        public static Node Append(string id, string A = "", string B = "")
            => new()
            {
                Id = id,
                Type = "Append",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "string",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "string",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node ToString<T>(string id, string typeT, T Value = default)
            => new()
            {
                Id = id,
                Type = "ToString",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                    },
                },
        };

        public static Node Contains(string id, string String = "", string Substring = "", bool IgnoreCase = false)
            => new()
            {
                Id = id,
                Type = "Contains",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                    new()
                    {
                        Id = "Substring",
                        Type = "string",
                        Value = Substring,
                    },
                    new()
                    {
                        Id = "IgnoreCase",
                        Type = "boolean",
                        Value = IgnoreCase,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Contains",
                        Type = "boolean",
                    },
                },
        };

        public static Node ToUpper(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "ToUpper",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node FormatString(string id, string FormatString = "", List<string> Item = null)
            => new()
            {
                Id = id,
                Type = "FormatString",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "FormatString",
                        Type = "string",
                        Value = FormatString,
                    },
                }
                .Concat(
                    (Item ?? new List<string>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Item.{index + 1}",
                            Type = "string",
                            Value = i,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node Split(string id, string String = "", string Separator = "")
            => new()
            {
                Id = id,
                Type = "Split",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                    new()
                    {
                        Id = "Separator",
                        Type = "string",
                        Value = Separator,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Parts",
                        Type = "Array<string>",
                    },
                },
        };

        public static Node Replace(string id, string String = "", string ToReplace = "", string Replacement = "")
            => new()
            {
                Id = id,
                Type = "Replace",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                    new()
                    {
                        Id = "ToReplace",
                        Type = "string",
                        Value = ToReplace,
                    },
                    new()
                    {
                        Id = "Replacement",
                        Type = "string",
                        Value = Replacement,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node ToLower(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "ToLower",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node TransformPosition(string id, object SceneNode = null, bool WorldSpace = false, bool Additive = false, float Right = 0f, float Up = 0f, float Forward = 0f)
            => new()
            {
                Id = id,
                Type = "TransformPosition",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                    new()
                    {
                        Id = "WorldSpace",
                        Type = "boolean",
                        Value = WorldSpace,
                    },
                    new()
                    {
                        Id = "Additive",
                        Type = "boolean",
                        Value = Additive,
                    },
                    new()
                    {
                        Id = "Right",
                        Type = "float",
                        Value = Right,
                    },
                    new()
                    {
                        Id = "Up",
                        Type = "float",
                        Value = Up,
                    },
                    new()
                    {
                        Id = "Forward",
                        Type = "float",
                        Value = Forward,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node TransformScale(string id, object SceneNode = null, bool Additive = false, float Right = 0f, float Up = 0f, float Forward = 0f)
            => new()
            {
                Id = id,
                Type = "TransformScale",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                    new()
                    {
                        Id = "Additive",
                        Type = "boolean",
                        Value = Additive,
                    },
                    new()
                    {
                        Id = "Right",
                        Type = "float",
                        Value = Right,
                    },
                    new()
                    {
                        Id = "Up",
                        Type = "float",
                        Value = Up,
                    },
                    new()
                    {
                        Id = "Forward",
                        Type = "float",
                        Value = Forward,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node TransformRotation(string id, object SceneNode = null, bool WorldSpace = false, bool Additive = false, float Pitch = 0f, float Yaw = 0f, float Roll = 0f)
            => new()
            {
                Id = id,
                Type = "TransformRotation",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                    new()
                    {
                        Id = "WorldSpace",
                        Type = "boolean",
                        Value = WorldSpace,
                    },
                    new()
                    {
                        Id = "Additive",
                        Type = "boolean",
                        Value = Additive,
                    },
                    new()
                    {
                        Id = "Pitch",
                        Type = "float",
                        Value = Pitch,
                    },
                    new()
                    {
                        Id = "Yaw",
                        Type = "float",
                        Value = Yaw,
                    },
                    new()
                    {
                        Id = "Roll",
                        Type = "float",
                        Value = Roll,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node SetBlendShape(string id, object Renderer = null, string BlendShapeID = "", float Value = 0f)
            => new()
            {
                Id = id,
                Type = "SetBlendShape",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Renderer",
                        Type = "MeshRenderer",
                        Value = Renderer,
                    },
                    new()
                    {
                        Id = "BlendShapeID",
                        Type = "string",
                        Value = BlendShapeID,
                    },
                    new()
                    {
                        Id = "Value",
                        Type = "float",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node ExecuteBlueprint(string id, object Blueprint = null, Dictionary<string, object> InBindingID = null)
            => new()
            {
                Id = id,
                Type = "ExecuteBlueprint",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Blueprint",
                        Type = "Resource<Blueprint>",
                        Value = Blueprint,
                    },
                }
                .Concat(
                    (InBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Out.{Binding ID}",
                        Type = "unknown",
                    },
                },
        };

        public static Node ExecuteFunction(string id, string FunctionID = "", Dictionary<string, object> InFunctionBindingID = null)
            => new()
            {
                Id = id,
                Type = "ExecuteFunction",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "FunctionID",
                        Type = "string",
                        Value = FunctionID,
                    },
                }
                .Concat(
                    (InFunctionBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Out.{Function Binding ID}",
                        Type = "unknown",
                    },
                },
        };

        public static Node Return(string id, Dictionary<string, object> InFunctionBindingID = null)
            => new()
            {
                Id = id,
                Type = "Return",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                }
                .Concat(
                    (InFunctionBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                },
        };

        public static Node CreateGLBResource(string id, string URI = "")
            => new()
            {
                Id = id,
                Type = "CreateGLBResource",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "URI",
                        Type = "string",
                        Value = URI,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "GLB",
                        Type = "Resource<GLB>",
                    },
                },
        };

        public static Node CreateMeshResource(string id, string URI = "", string MeshID = "")
            => new()
            {
                Id = id,
                Type = "CreateMeshResource",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "URI",
                        Type = "string",
                        Value = URI,
                    },
                    new()
                    {
                        Id = "MeshID",
                        Type = "string",
                        Value = MeshID,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Mesh",
                        Type = "Resource<Mesh>",
                    },
                },
        };

        public static Node CreateTextureResource(string id, string URI = "", bool SRGB = false)
            => new()
            {
                Id = id,
                Type = "CreateTextureResource",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "URI",
                        Type = "string",
                        Value = URI,
                    },
                    new()
                    {
                        Id = "SRGB",
                        Type = "boolean",
                        Value = SRGB,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Texture",
                        Type = "Resource<Texture>",
                    },
                },
        };

        public static Node CreateBlueprintResource(string id, string URI = "")
            => new()
            {
                Id = id,
                Type = "CreateBlueprintResource",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "URI",
                        Type = "string",
                        Value = URI,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Blueprint",
                        Type = "Resource<Blueprint>",
                    },
                },
        };

        public static Node FilterSceneObjects<T>(string id, string typeT, string Filter = "")
            => new()
            {
                Id = id,
                Type = "FilterSceneObjects",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneObjects",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Filter",
                        Type = "string",
                        Value = Filter,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Filtered",
                        Type = $"Array<{typeT}>",
                    },
                },
        };

        public static Node GetSceneObjectName<T>(string id, string typeT, T SceneObject = default)
            => new()
            {
                Id = id,
                Type = "GetSceneObjectName",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneObject",
                        Type = typeT,
                        Value = SceneObject,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Name",
                        Type = "string",
                    },
                },
        };

        public static Node GetSceneComponents<T>(string id, string typeT, object SceneNode = null, string Type = "")
            => new()
            {
                Id = id,
                Type = "GetSceneComponents",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                    new()
                    {
                        Id = "Type",
                        Type = "string",
                        Value = Type,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneComponents",
                        Type = $"Array<{typeT}>",
                    },
                },
        };

        public static Node GetSceneNode<T>(string id, string typeT, T SceneComponent = default)
            => new()
            {
                Id = id,
                Type = "GetSceneNode",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneComponent",
                        Type = typeT,
                        Value = SceneComponent,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                    },
                },
        };

        public static Node GetParentSceneNode(string id, object SceneNode = null)
            => new()
            {
                Id = id,
                Type = "GetParentSceneNode",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                    },
                },
        };

        public static Node GetChildSceneNodes(string id, object SceneNode = null)
            => new()
            {
                Id = id,
                Type = "GetChildSceneNodes",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Children",
                        Type = "Array<SceneNode>",
                    },
                },
        };

        public static Node AttachSceneNode(string id, object SceneNode = null, object Parent = null)
            => new()
            {
                Id = id,
                Type = "AttachSceneNode",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "SceneNode",
                        Type = "SceneNode",
                        Value = SceneNode,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node GetRigRootBone(string id, object Rig = null)
            => new()
            {
                Id = id,
                Type = "GetRigRootBone",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Rig",
                        Type = "Rig",
                        Value = Rig,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "RootBone",
                        Type = "SceneNode",
                    },
                },
        };

        public static Node GetRigBones(string id, object Rig = null)
            => new()
            {
                Id = id,
                Type = "GetRigBones",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Rig",
                        Type = "Rig",
                        Value = Rig,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Bones",
                        Type = "Array<SceneNode>",
                    },
                },
        };

    }
}
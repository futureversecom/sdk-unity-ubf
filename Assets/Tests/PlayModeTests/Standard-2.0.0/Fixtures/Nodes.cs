// Copyright (c) 2025, Futureverse Corporation Limited. All rights reserved.
//
// WARNING - DO NOT EDIT
// This file was generated by fv-ubf-standard/cs-gen.ts.
//

using System;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable RedundantEmptyObjectOrCollectionInitializer
// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable InconsistentNaming

public class First<T> : Node
{
    public struct In
    {
          public const string Array = "Array";
    }

    public struct Out
    {
          public const string Element = "Element";
    }

    public First(string typeT)
    {
        Id = Guid.NewGuid().ToString();
        Type = "First";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Array",
                    Type = $"Array<{typeT}>",
                    Value = null,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Element",
                    Type = typeT,
                },
        };
    }
};

public class Length<T> : Node
{
    public struct In
    {
          public const string Array = "Array";
    }

    public struct Out
    {
          public const string Length = "Length";
    }

    public Length(string typeT)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Length";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Array",
                    Type = $"Array<{typeT}>",
                    Value = null,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Length",
                    Type = "int",
                },
        };
    }
};

public class AtIndex<T> : Node
{
    public struct In
    {
          public const string Array = "Array";
          public const string Index = "Index";
    }

    public struct Out
    {
          public const string Element = "Element";
    }

    public AtIndex(string typeT, int Index = 0)
    {
        Id = Guid.NewGuid().ToString();
        Type = "AtIndex";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Array",
                    Type = $"Array<{typeT}>",
                    Value = null,
                },
                new()
                {
                    Id = "Index",
                    Type = "int",
                    Value = Index,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Element",
                    Type = typeT,
                },
        };
    }
};

public class Pick<T> : Node
{
    public struct In
    {
          public const string True = "True";
          public const string False = "False";
          public const string Condition = "Condition";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Pick(string typeT, T True = default, T False = default, bool Condition = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Pick";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "True",
                    Type = typeT,
                    Value = True,
                },
                new()
                {
                    Id = "False",
                    Type = typeT,
                    Value = False,
                },
                new()
                {
                    Id = "Condition",
                    Type = "boolean",
                    Value = Condition,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = typeT,
                },
        };
    }
};

public class ForEach<T> : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Array = "Array";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string Loop = "Loop";
          public const string Element = "Element";
          public const string Index = "Index";
    }

    public ForEach(string typeT)
    {
        Id = Guid.NewGuid().ToString();
        Type = "ForEach";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Array",
                    Type = $"Array<{typeT}>",
                    Value = null,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "Loop",
                    Type = "exec",
                },
                new()
                {
                    Id = "Element",
                    Type = typeT,
                },
                new()
                {
                    Id = "Index",
                    Type = "int",
                },
        };
    }
};

public class MakeArray<T> : Node
{
    public struct In
    {
          public const string Element = "Element";
    }

    public struct Out
    {
          public const string Array = "Array";
    }

    public MakeArray(string typeT, List<T> Element = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakeArray";
        Inputs = new List<Pin>
        {
        }
            .Concat(
                (Element ?? new List<T>()).Select(
                    (i, index) => new Pin
                    {
                        Id = $"Element.{index + 1}",
                        Type = typeT,
                        Value = i,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Array",
                    Type = $"Array<{typeT}>",
                },
        };
    }
};

public class Set : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string BindingName = "BindingName";
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public Set(object BindingName = null, object Value = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Set";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "BindingName",
                    Type = "unknown",
                    Value = BindingName,
                },
                new()
                {
                    Id = "Value",
                    Type = "unknown",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class Get<T> : Node
{
    public struct In
    {
          public const string BindingName = "BindingName";
    }

    public struct Out
    {
          public const string Value = "Value";
    }

    public Get(string typeT, object BindingName = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Get";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "BindingName",
                    Type = "unknown",
                    Value = BindingName,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = typeT,
                },
        };
    }
};

public class SetOutputs : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string InBindingID = "InBindingID";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public SetOutputs(Dictionary<string, object> InBindingID = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "SetOutputs";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
        }
            .Concat(
                (InBindingID ?? new Dictionary<string, object>()).Select(
                    (kvp) => new Pin
                    {
                        Id = kvp.Key,
                        Type = "unknown",
                        Value = kvp.Value,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class Entry : Node
{
    public struct In
    {
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public Entry()
    {
        Id = Guid.NewGuid().ToString();
        Type = "Entry";
        Inputs = new List<Pin>
        {
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class DebugLog : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Message = "Message";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public DebugLog(string Message = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "DebugLog";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Message",
                    Type = "string",
                    Value = Message,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class BoolLiteral : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string Bool = "Bool";
    }

    public BoolLiteral(bool Value = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "BoolLiteral";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = "boolean",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Bool",
                    Type = "boolean",
                },
        };
    }
};

public class IntLiteral : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string Int = "Int";
    }

    public IntLiteral(int Value = 0)
    {
        Id = Guid.NewGuid().ToString();
        Type = "IntLiteral";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = "int",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Int",
                    Type = "int",
                },
        };
    }
};

public class FloatLiteral : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string Float = "Float";
    }

    public FloatLiteral(float Value = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "FloatLiteral";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = "float",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Float",
                    Type = "float",
                },
        };
    }
};

public class ColorLiteral : Node
{
    public struct In
    {
          public const string R = "R";
          public const string G = "G";
          public const string B = "B";
          public const string A = "A";
    }

    public struct Out
    {
          public const string Color = "Color";
    }

    public ColorLiteral(float R = 0f, float G = 0f, float B = 0f, float A = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "ColorLiteral";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "R",
                    Type = "float",
                    Value = R,
                },
                new()
                {
                    Id = "G",
                    Type = "float",
                    Value = G,
                },
                new()
                {
                    Id = "B",
                    Type = "float",
                    Value = B,
                },
                new()
                {
                    Id = "A",
                    Type = "float",
                    Value = A,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Color",
                    Type = "Color",
                },
        };
    }
};

public class StringLiteral : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string String = "String";
    }

    public StringLiteral(string Value = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "StringLiteral";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = "string",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                },
        };
    }
};

public class And : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public And(bool A = false, bool B = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "And";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = "boolean",
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = "boolean",
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class Or : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Or(bool A = false, bool B = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Or";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = "boolean",
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = "boolean",
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class Xor : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Xor(bool A = false, bool B = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Xor";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = "boolean",
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = "boolean",
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class Not : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Not(bool Value = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Not";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = "boolean",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class Branch : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Condition = "Condition";
    }

    public struct Out
    {
          public const string True = "True";
          public const string False = "False";
    }

    public Branch(bool Condition = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Branch";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Condition",
                    Type = "boolean",
                    Value = Condition,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "True",
                    Type = "exec",
                },
                new()
                {
                    Id = "False",
                    Type = "exec",
                },
        };
    }
};

public class Equals<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Equals(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Equals";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class NotEquals<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public NotEquals(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "NotEquals";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class GreaterThan<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GreaterThan(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GreaterThan";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class LessThan<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public LessThan(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "LessThan";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class GreaterThanOrEquals<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GreaterThanOrEquals(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GreaterThanOrEquals";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class LessThanOrEquals<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public LessThanOrEquals(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "LessThanOrEquals";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class IsNull<T> : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string IsNull = "IsNull";
    }

    public IsNull(string typeT, T Value = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "IsNull";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = typeT,
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "IsNull",
                    Type = "boolean",
                },
        };
    }
};

public class ApplyMaterial : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string MaterialIndex = "MaterialIndex";
          public const string Renderer = "Renderer";
          public const string Material = "Material";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public ApplyMaterial(int MaterialIndex = 0, object Renderer = null, object Material = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "ApplyMaterial";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "MaterialIndex",
                    Type = "int",
                    Value = MaterialIndex,
                },
                new()
                {
                    Id = "Renderer",
                    Type = "MeshRenderer",
                    Value = Renderer,
                },
                new()
                {
                    Id = "Material",
                    Type = "Material",
                    Value = Material,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class MakePBRMaterial : Node
{
    public struct In
    {
          public const string RenderMode = "RenderMode";
          public const string AlphaTexture = "AlphaTexture";
          public const string UseAlphaTexture = "UseAlphaTexture";
          public const string DiffuseTexture = "DiffuseTexture";
          public const string BaseColor = "BaseColor";
          public const string UseAlpha = "UseAlpha";
          public const string FresnelIOR = "FresnelIOR";
          public const string Opacity = "Opacity";
          public const string UseEmission = "UseEmission";
          public const string UseEmissiveTint = "UseEmissiveTint";
          public const string EmissiveTexture = "EmissiveTexture";
          public const string EmissiveColorBoost = "EmissiveColorBoost";
          public const string EmissiveTint = "EmissiveTint";
          public const string EmissiveTintBoost = "EmissiveTintBoost";
          public const string UseNormalMap = "UseNormalMap";
          public const string NormalTexture = "NormalTexture";
          public const string UseORM = "UseORM";
          public const string ORM = "ORM";
          public const string Occlusion = "Occlusion";
          public const string Roughness = "Roughness";
          public const string Metallic = "Metallic";
    }

    public struct Out
    {
          public const string Material = "Material";
    }

    public MakePBRMaterial(string RenderMode = "", object AlphaTexture = null, bool UseAlphaTexture = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakePBRMaterial";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "RenderMode",
                    Type = "string",
                    Value = RenderMode,
                },
                new()
                {
                    Id = "AlphaTexture",
                    Type = "Resource<Texture>",
                    Value = AlphaTexture,
                },
                new()
                {
                    Id = "UseAlphaTexture",
                    Type = "boolean",
                    Value = UseAlphaTexture,
                },
                new()
                {
                    Id = "DiffuseTexture",
                    Type = "Resource<Texture>",
                    Value = DiffuseTexture,
                },
                new()
                {
                    Id = "BaseColor",
                    Type = "Color",
                    Value = BaseColor,
                },
                new()
                {
                    Id = "UseAlpha",
                    Type = "boolean",
                    Value = UseAlpha,
                },
                new()
                {
                    Id = "FresnelIOR",
                    Type = "float",
                    Value = FresnelIOR,
                },
                new()
                {
                    Id = "Opacity",
                    Type = "float",
                    Value = Opacity,
                },
                new()
                {
                    Id = "UseEmission",
                    Type = "boolean",
                    Value = UseEmission,
                },
                new()
                {
                    Id = "UseEmissiveTint",
                    Type = "boolean",
                    Value = UseEmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTexture",
                    Type = "Resource<Texture>",
                    Value = EmissiveTexture,
                },
                new()
                {
                    Id = "EmissiveColorBoost",
                    Type = "float",
                    Value = EmissiveColorBoost,
                },
                new()
                {
                    Id = "EmissiveTint",
                    Type = "Color",
                    Value = EmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTintBoost",
                    Type = "float",
                    Value = EmissiveTintBoost,
                },
                new()
                {
                    Id = "UseNormalMap",
                    Type = "boolean",
                    Value = UseNormalMap,
                },
                new()
                {
                    Id = "NormalTexture",
                    Type = "Resource<Texture>",
                    Value = NormalTexture,
                },
                new()
                {
                    Id = "UseORM",
                    Type = "boolean",
                    Value = UseORM,
                },
                new()
                {
                    Id = "ORM",
                    Type = "Resource<Texture>",
                    Value = ORM,
                },
                new()
                {
                    Id = "Occlusion",
                    Type = "float",
                    Value = Occlusion,
                },
                new()
                {
                    Id = "Roughness",
                    Type = "float",
                    Value = Roughness,
                },
                new()
                {
                    Id = "Metallic",
                    Type = "float",
                    Value = Metallic,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Material",
                    Type = "Material",
                },
        };
    }
};

public class MakeSkinMaterial : Node
{
    public struct In
    {
          public const string GCLSTexture = "GCLSTexture";
          public const string NormalTexture = "NormalTexture";
          public const string ORSTexture = "ORSTexture";
          public const string SkinColor = "SkinColor";
          public const string Redness = "Redness";
          public const string LipColor = "LipColor";
          public const string SkinVariation = "SkinVariation";
          public const string DarkAreaHue = "DarkAreaHue";
          public const string DarkAreaSaturation = "DarkAreaSaturation";
          public const string DarkAreaValue = "DarkAreaValue";
          public const string RoughnessStrength = "RoughnessStrength";
          public const string AOStrength = "AOStrength";
          public const string BuzzcutTexture = "BuzzcutTexture";
          public const string StubbleTexture = "StubbleTexture";
          public const string FrecklesTexture = "FrecklesTexture";
          public const string MolesTexture = "MolesTexture";
          public const string ScarsTexture = "ScarsTexture";
          public const string HairColor = "HairColor";
          public const string FreckleColor = "FreckleColor";
          public const string MoleColor = "MoleColor";
          public const string ScarColor = "ScarColor";
          public const string StubbleGrowth = "StubbleGrowth";
          public const string StubbleContrast = "StubbleContrast";
          public const string MoleNormalStrength = "MoleNormalStrength";
          public const string ScarColorContrast = "ScarColorContrast";
          public const string ScarColorFalloff = "ScarColorFalloff";
          public const string ScarNormalStrength = "ScarNormalStrength";
    }

    public struct Out
    {
          public const string Material = "Material";
    }

    public MakeSkinMaterial(object GCLSTexture = null, object NormalTexture = null, object ORSTexture = null, string SkinColor = "#000000", string Redness = "#000000", string LipColor = "#000000", float SkinVariation = 0f, float DarkAreaHue = 0f, float DarkAreaSaturation = 0f, float DarkAreaValue = 0f, float RoughnessStrength = 0f, float AOStrength = 0f, object BuzzcutTexture = null, object StubbleTexture = null, object FrecklesTexture = null, object MolesTexture = null, object ScarsTexture = null, string HairColor = "#000000", string FreckleColor = "#000000", string MoleColor = "#000000", string ScarColor = "#000000", float StubbleGrowth = 0f, float StubbleContrast = 0f, float MoleNormalStrength = 0f, float ScarColorContrast = 0f, float ScarColorFalloff = 0f, float ScarNormalStrength = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakeSkinMaterial";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "GCLSTexture",
                    Type = "Resource<Texture>",
                    Value = GCLSTexture,
                },
                new()
                {
                    Id = "NormalTexture",
                    Type = "Resource<Texture>",
                    Value = NormalTexture,
                },
                new()
                {
                    Id = "ORSTexture",
                    Type = "Resource<Texture>",
                    Value = ORSTexture,
                },
                new()
                {
                    Id = "SkinColor",
                    Type = "Color",
                    Value = SkinColor,
                },
                new()
                {
                    Id = "Redness",
                    Type = "Color",
                    Value = Redness,
                },
                new()
                {
                    Id = "LipColor",
                    Type = "Color",
                    Value = LipColor,
                },
                new()
                {
                    Id = "SkinVariation",
                    Type = "float",
                    Value = SkinVariation,
                },
                new()
                {
                    Id = "DarkAreaHue",
                    Type = "float",
                    Value = DarkAreaHue,
                },
                new()
                {
                    Id = "DarkAreaSaturation",
                    Type = "float",
                    Value = DarkAreaSaturation,
                },
                new()
                {
                    Id = "DarkAreaValue",
                    Type = "float",
                    Value = DarkAreaValue,
                },
                new()
                {
                    Id = "RoughnessStrength",
                    Type = "float",
                    Value = RoughnessStrength,
                },
                new()
                {
                    Id = "AOStrength",
                    Type = "float",
                    Value = AOStrength,
                },
                new()
                {
                    Id = "BuzzcutTexture",
                    Type = "Resource<Texture>",
                    Value = BuzzcutTexture,
                },
                new()
                {
                    Id = "StubbleTexture",
                    Type = "Resource<Texture>",
                    Value = StubbleTexture,
                },
                new()
                {
                    Id = "FrecklesTexture",
                    Type = "Resource<Texture>",
                    Value = FrecklesTexture,
                },
                new()
                {
                    Id = "MolesTexture",
                    Type = "Resource<Texture>",
                    Value = MolesTexture,
                },
                new()
                {
                    Id = "ScarsTexture",
                    Type = "Resource<Texture>",
                    Value = ScarsTexture,
                },
                new()
                {
                    Id = "HairColor",
                    Type = "Color",
                    Value = HairColor,
                },
                new()
                {
                    Id = "FreckleColor",
                    Type = "Color",
                    Value = FreckleColor,
                },
                new()
                {
                    Id = "MoleColor",
                    Type = "Color",
                    Value = MoleColor,
                },
                new()
                {
                    Id = "ScarColor",
                    Type = "Color",
                    Value = ScarColor,
                },
                new()
                {
                    Id = "StubbleGrowth",
                    Type = "float",
                    Value = StubbleGrowth,
                },
                new()
                {
                    Id = "StubbleContrast",
                    Type = "float",
                    Value = StubbleContrast,
                },
                new()
                {
                    Id = "MoleNormalStrength",
                    Type = "float",
                    Value = MoleNormalStrength,
                },
                new()
                {
                    Id = "ScarColorContrast",
                    Type = "float",
                    Value = ScarColorContrast,
                },
                new()
                {
                    Id = "ScarColorFalloff",
                    Type = "float",
                    Value = ScarColorFalloff,
                },
                new()
                {
                    Id = "ScarNormalStrength",
                    Type = "float",
                    Value = ScarNormalStrength,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Material",
                    Type = "Material",
                },
        };
    }
};

public class MakeSkin02Material : Node
{
    public struct In
    {
          public const string BaseColorTexture = "BaseColorTexture";
          public const string AmbientOcclusion = "AmbientOcclusion";
          public const string ColorTint = "ColorTint";
          public const string ORMTexture = "ORMTexture";
          public const string Metallic = "Metallic";
          public const string Roughness = "Roughness";
          public const string NormalTexture = "NormalTexture";
          public const string NormalStrength = "NormalStrength";
          public const string FlipNormal = "FlipNormal";
          public const string Fresnel = "Fresnel";
          public const string FresnelColor = "FresnelColor";
          public const string FresnelPower = "FresnelPower";
          public const string UseEmission = "UseEmission";
          public const string EmissiveTint = "EmissiveTint";
          public const string EmissiveStrength = "EmissiveStrength";
          public const string EmissiveTexture = "EmissiveTexture";
          public const string FreckleTexture = "FreckleTexture";
          public const string FreckleOpacity = "FreckleOpacity";
          public const string FreckleTint = "FreckleTint";
          public const string TattooTexture = "TattooTexture";
          public const string TattooTint = "TattooTint";
          public const string BeardTexture = "BeardTexture";
          public const string BeardOpacity = "BeardOpacity";
          public const string BeardTint = "BeardTint";
          public const string FacePaintTexture = "FacePaintTexture";
          public const string FacePaintOpacity = "FacePaintOpacity";
    }

    public struct Out
    {
          public const string Material = "Material";
    }

    public MakeSkin02Material(object BaseColorTexture = null, float AmbientOcclusion = 0f, string ColorTint = "#000000", object ORMTexture = null, float Metallic = 0f, float Roughness = 0f, object NormalTexture = null, float NormalStrength = 0f, bool FlipNormal = false, bool Fresnel = false, string FresnelColor = "#000000", float FresnelPower = 0f, bool UseEmission = false, string EmissiveTint = "#000000", float EmissiveStrength = 0f, object EmissiveTexture = null, object FreckleTexture = null, float FreckleOpacity = 0f, string FreckleTint = "#000000", object TattooTexture = null, string TattooTint = "#000000", object BeardTexture = null, float BeardOpacity = 0f, string BeardTint = "#000000", object FacePaintTexture = null, float FacePaintOpacity = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakeSkin02Material";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "BaseColorTexture",
                    Type = "Resource<Texture>",
                    Value = BaseColorTexture,
                },
                new()
                {
                    Id = "AmbientOcclusion",
                    Type = "float",
                    Value = AmbientOcclusion,
                },
                new()
                {
                    Id = "ColorTint",
                    Type = "Color",
                    Value = ColorTint,
                },
                new()
                {
                    Id = "ORMTexture",
                    Type = "Resource<Texture>",
                    Value = ORMTexture,
                },
                new()
                {
                    Id = "Metallic",
                    Type = "float",
                    Value = Metallic,
                },
                new()
                {
                    Id = "Roughness",
                    Type = "float",
                    Value = Roughness,
                },
                new()
                {
                    Id = "NormalTexture",
                    Type = "Resource<Texture>",
                    Value = NormalTexture,
                },
                new()
                {
                    Id = "NormalStrength",
                    Type = "float",
                    Value = NormalStrength,
                },
                new()
                {
                    Id = "FlipNormal",
                    Type = "boolean",
                    Value = FlipNormal,
                },
                new()
                {
                    Id = "Fresnel",
                    Type = "boolean",
                    Value = Fresnel,
                },
                new()
                {
                    Id = "FresnelColor",
                    Type = "Color",
                    Value = FresnelColor,
                },
                new()
                {
                    Id = "FresnelPower",
                    Type = "float",
                    Value = FresnelPower,
                },
                new()
                {
                    Id = "UseEmission",
                    Type = "boolean",
                    Value = UseEmission,
                },
                new()
                {
                    Id = "EmissiveTint",
                    Type = "Color",
                    Value = EmissiveTint,
                },
                new()
                {
                    Id = "EmissiveStrength",
                    Type = "float",
                    Value = EmissiveStrength,
                },
                new()
                {
                    Id = "EmissiveTexture",
                    Type = "Resource<Texture>",
                    Value = EmissiveTexture,
                },
                new()
                {
                    Id = "FreckleTexture",
                    Type = "Resource<Texture>",
                    Value = FreckleTexture,
                },
                new()
                {
                    Id = "FreckleOpacity",
                    Type = "float",
                    Value = FreckleOpacity,
                },
                new()
                {
                    Id = "FreckleTint",
                    Type = "Color",
                    Value = FreckleTint,
                },
                new()
                {
                    Id = "TattooTexture",
                    Type = "Resource<Texture>",
                    Value = TattooTexture,
                },
                new()
                {
                    Id = "TattooTint",
                    Type = "Color",
                    Value = TattooTint,
                },
                new()
                {
                    Id = "BeardTexture",
                    Type = "Resource<Texture>",
                    Value = BeardTexture,
                },
                new()
                {
                    Id = "BeardOpacity",
                    Type = "float",
                    Value = BeardOpacity,
                },
                new()
                {
                    Id = "BeardTint",
                    Type = "Color",
                    Value = BeardTint,
                },
                new()
                {
                    Id = "FacePaintTexture",
                    Type = "Resource<Texture>",
                    Value = FacePaintTexture,
                },
                new()
                {
                    Id = "FacePaintOpacity",
                    Type = "float",
                    Value = FacePaintOpacity,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Material",
                    Type = "Material",
                },
        };
    }
};

public class MakeDecalMaterial : Node
{
    public struct In
    {
          public const string RenderMode = "RenderMode";
          public const string AlphaTexture = "AlphaTexture";
          public const string UseAlphaTexture = "UseAlphaTexture";
          public const string DiffuseTexture = "DiffuseTexture";
          public const string BaseColor = "BaseColor";
          public const string UseAlpha = "UseAlpha";
          public const string FresnelIOR = "FresnelIOR";
          public const string Opacity = "Opacity";
          public const string UseEmission = "UseEmission";
          public const string UseEmissiveTint = "UseEmissiveTint";
          public const string EmissiveTexture = "EmissiveTexture";
          public const string EmissiveColorBoost = "EmissiveColorBoost";
          public const string EmissiveTint = "EmissiveTint";
          public const string EmissiveTintBoost = "EmissiveTintBoost";
          public const string UseNormalMap = "UseNormalMap";
          public const string NormalTexture = "NormalTexture";
          public const string UseORM = "UseORM";
          public const string ORM = "ORM";
          public const string Occlusion = "Occlusion";
          public const string Roughness = "Roughness";
          public const string Metallic = "Metallic";
          public const string UseDecals = "UseDecals";
          public const string DecalTexture = "DecalTexture";
          public const string TintBase = "TintBase";
          public const string DarkenBase = "DarkenBase";
          public const string RoughBase = "RoughBase";
          public const string MetalBase = "MetalBase";
          public const string FlakesBase = "FlakesBase";
          public const string TintA = "TintA";
          public const string DarkenA = "DarkenA";
          public const string RoughA = "RoughA";
          public const string MetalA = "MetalA";
          public const string FlakesA = "FlakesA";
          public const string TintB = "TintB";
          public const string DarkenB = "DarkenB";
          public const string RoughB = "RoughB";
          public const string MetalB = "MetalB";
          public const string FlakesB = "FlakesB";
          public const string TintC = "TintC";
          public const string DarkenC = "DarkenC";
          public const string RoughC = "RoughC";
          public const string MetalC = "MetalC";
          public const string FlakeC = "FlakeC";
    }

    public struct Out
    {
          public const string Material = "Material";
    }

    public MakeDecalMaterial(string RenderMode = "", object AlphaTexture = null, bool UseAlphaTexture = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f, bool UseDecals = false, object DecalTexture = null, string TintBase = "#000000", float DarkenBase = 0f, float RoughBase = 0f, float MetalBase = 0f, float FlakesBase = 0f, string TintA = "#000000", float DarkenA = 0f, float RoughA = 0f, float MetalA = 0f, float FlakesA = 0f, string TintB = "#000000", float DarkenB = 0f, float RoughB = 0f, float MetalB = 0f, float FlakesB = 0f, string TintC = "#000000", float DarkenC = 0f, float RoughC = 0f, float MetalC = 0f, float FlakeC = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakeDecalMaterial";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "RenderMode",
                    Type = "string",
                    Value = RenderMode,
                },
                new()
                {
                    Id = "AlphaTexture",
                    Type = "Resource<Texture>",
                    Value = AlphaTexture,
                },
                new()
                {
                    Id = "UseAlphaTexture",
                    Type = "boolean",
                    Value = UseAlphaTexture,
                },
                new()
                {
                    Id = "DiffuseTexture",
                    Type = "Resource<Texture>",
                    Value = DiffuseTexture,
                },
                new()
                {
                    Id = "BaseColor",
                    Type = "Color",
                    Value = BaseColor,
                },
                new()
                {
                    Id = "UseAlpha",
                    Type = "boolean",
                    Value = UseAlpha,
                },
                new()
                {
                    Id = "FresnelIOR",
                    Type = "float",
                    Value = FresnelIOR,
                },
                new()
                {
                    Id = "Opacity",
                    Type = "float",
                    Value = Opacity,
                },
                new()
                {
                    Id = "UseEmission",
                    Type = "boolean",
                    Value = UseEmission,
                },
                new()
                {
                    Id = "UseEmissiveTint",
                    Type = "boolean",
                    Value = UseEmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTexture",
                    Type = "Resource<Texture>",
                    Value = EmissiveTexture,
                },
                new()
                {
                    Id = "EmissiveColorBoost",
                    Type = "float",
                    Value = EmissiveColorBoost,
                },
                new()
                {
                    Id = "EmissiveTint",
                    Type = "Color",
                    Value = EmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTintBoost",
                    Type = "float",
                    Value = EmissiveTintBoost,
                },
                new()
                {
                    Id = "UseNormalMap",
                    Type = "boolean",
                    Value = UseNormalMap,
                },
                new()
                {
                    Id = "NormalTexture",
                    Type = "Resource<Texture>",
                    Value = NormalTexture,
                },
                new()
                {
                    Id = "UseORM",
                    Type = "boolean",
                    Value = UseORM,
                },
                new()
                {
                    Id = "ORM",
                    Type = "Resource<Texture>",
                    Value = ORM,
                },
                new()
                {
                    Id = "Occlusion",
                    Type = "float",
                    Value = Occlusion,
                },
                new()
                {
                    Id = "Roughness",
                    Type = "float",
                    Value = Roughness,
                },
                new()
                {
                    Id = "Metallic",
                    Type = "float",
                    Value = Metallic,
                },
                new()
                {
                    Id = "UseDecals",
                    Type = "boolean",
                    Value = UseDecals,
                },
                new()
                {
                    Id = "DecalTexture",
                    Type = "Resource<Texture>",
                    Value = DecalTexture,
                },
                new()
                {
                    Id = "TintBase",
                    Type = "Color",
                    Value = TintBase,
                },
                new()
                {
                    Id = "DarkenBase",
                    Type = "float",
                    Value = DarkenBase,
                },
                new()
                {
                    Id = "RoughBase",
                    Type = "float",
                    Value = RoughBase,
                },
                new()
                {
                    Id = "MetalBase",
                    Type = "float",
                    Value = MetalBase,
                },
                new()
                {
                    Id = "FlakesBase",
                    Type = "float",
                    Value = FlakesBase,
                },
                new()
                {
                    Id = "TintA",
                    Type = "Color",
                    Value = TintA,
                },
                new()
                {
                    Id = "DarkenA",
                    Type = "float",
                    Value = DarkenA,
                },
                new()
                {
                    Id = "RoughA",
                    Type = "float",
                    Value = RoughA,
                },
                new()
                {
                    Id = "MetalA",
                    Type = "float",
                    Value = MetalA,
                },
                new()
                {
                    Id = "FlakesA",
                    Type = "float",
                    Value = FlakesA,
                },
                new()
                {
                    Id = "TintB",
                    Type = "Color",
                    Value = TintB,
                },
                new()
                {
                    Id = "DarkenB",
                    Type = "float",
                    Value = DarkenB,
                },
                new()
                {
                    Id = "RoughB",
                    Type = "float",
                    Value = RoughB,
                },
                new()
                {
                    Id = "MetalB",
                    Type = "float",
                    Value = MetalB,
                },
                new()
                {
                    Id = "FlakesB",
                    Type = "float",
                    Value = FlakesB,
                },
                new()
                {
                    Id = "TintC",
                    Type = "Color",
                    Value = TintC,
                },
                new()
                {
                    Id = "DarkenC",
                    Type = "float",
                    Value = DarkenC,
                },
                new()
                {
                    Id = "RoughC",
                    Type = "float",
                    Value = RoughC,
                },
                new()
                {
                    Id = "MetalC",
                    Type = "float",
                    Value = MetalC,
                },
                new()
                {
                    Id = "FlakeC",
                    Type = "float",
                    Value = FlakeC,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Material",
                    Type = "Material",
                },
        };
    }
};

public class MakeFurMaterial : Node
{
    public struct In
    {
          public const string RenderMode = "RenderMode";
          public const string DiffuseTexture = "DiffuseTexture";
          public const string BaseColor = "BaseColor";
          public const string UseAlpha = "UseAlpha";
          public const string FresnelIOR = "FresnelIOR";
          public const string Opacity = "Opacity";
          public const string UseEmission = "UseEmission";
          public const string UseEmissiveTint = "UseEmissiveTint";
          public const string EmissiveTexture = "EmissiveTexture";
          public const string EmissiveColorBoost = "EmissiveColorBoost";
          public const string EmissiveTint = "EmissiveTint";
          public const string EmissiveTintBoost = "EmissiveTintBoost";
          public const string UseNormalMap = "UseNormalMap";
          public const string NormalTexture = "NormalTexture";
          public const string UseORM = "UseORM";
          public const string ORM = "ORM";
          public const string Occlusion = "Occlusion";
          public const string Roughness = "Roughness";
          public const string Metallic = "Metallic";
          public const string HeightMap = "HeightMap";
          public const string IdMap = "IdMap";
    }

    public struct Out
    {
          public const string Material = "Material";
    }

    public MakeFurMaterial(string RenderMode = "", object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f, object HeightMap = null, object IdMap = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakeFurMaterial";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "RenderMode",
                    Type = "string",
                    Value = RenderMode,
                },
                new()
                {
                    Id = "DiffuseTexture",
                    Type = "Resource<Texture>",
                    Value = DiffuseTexture,
                },
                new()
                {
                    Id = "BaseColor",
                    Type = "Color",
                    Value = BaseColor,
                },
                new()
                {
                    Id = "UseAlpha",
                    Type = "boolean",
                    Value = UseAlpha,
                },
                new()
                {
                    Id = "FresnelIOR",
                    Type = "float",
                    Value = FresnelIOR,
                },
                new()
                {
                    Id = "Opacity",
                    Type = "float",
                    Value = Opacity,
                },
                new()
                {
                    Id = "UseEmission",
                    Type = "boolean",
                    Value = UseEmission,
                },
                new()
                {
                    Id = "UseEmissiveTint",
                    Type = "boolean",
                    Value = UseEmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTexture",
                    Type = "Resource<Texture>",
                    Value = EmissiveTexture,
                },
                new()
                {
                    Id = "EmissiveColorBoost",
                    Type = "float",
                    Value = EmissiveColorBoost,
                },
                new()
                {
                    Id = "EmissiveTint",
                    Type = "Color",
                    Value = EmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTintBoost",
                    Type = "float",
                    Value = EmissiveTintBoost,
                },
                new()
                {
                    Id = "UseNormalMap",
                    Type = "boolean",
                    Value = UseNormalMap,
                },
                new()
                {
                    Id = "NormalTexture",
                    Type = "Resource<Texture>",
                    Value = NormalTexture,
                },
                new()
                {
                    Id = "UseORM",
                    Type = "boolean",
                    Value = UseORM,
                },
                new()
                {
                    Id = "ORM",
                    Type = "Resource<Texture>",
                    Value = ORM,
                },
                new()
                {
                    Id = "Occlusion",
                    Type = "float",
                    Value = Occlusion,
                },
                new()
                {
                    Id = "Roughness",
                    Type = "float",
                    Value = Roughness,
                },
                new()
                {
                    Id = "Metallic",
                    Type = "float",
                    Value = Metallic,
                },
                new()
                {
                    Id = "HeightMap",
                    Type = "Resource<Texture>",
                    Value = HeightMap,
                },
                new()
                {
                    Id = "IdMap",
                    Type = "Resource<Texture>",
                    Value = IdMap,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Material",
                    Type = "Material",
                },
        };
    }
};

public class MakeHairMaterial : Node
{
    public struct In
    {
          public const string RenderMode = "RenderMode";
          public const string AlphaTexture = "AlphaTexture";
          public const string UseAlphaTexture = "UseAlphaTexture";
          public const string DiffuseTexture = "DiffuseTexture";
          public const string BaseColor = "BaseColor";
          public const string UseAlpha = "UseAlpha";
          public const string FresnelIOR = "FresnelIOR";
          public const string Opacity = "Opacity";
          public const string UseEmission = "UseEmission";
          public const string UseEmissiveTint = "UseEmissiveTint";
          public const string EmissiveTexture = "EmissiveTexture";
          public const string EmissiveColorBoost = "EmissiveColorBoost";
          public const string EmissiveTint = "EmissiveTint";
          public const string EmissiveTintBoost = "EmissiveTintBoost";
          public const string UseNormalMap = "UseNormalMap";
          public const string NormalTexture = "NormalTexture";
          public const string UseORM = "UseORM";
          public const string ORM = "ORM";
          public const string Occlusion = "Occlusion";
          public const string Roughness = "Roughness";
          public const string Metallic = "Metallic";
    }

    public struct Out
    {
          public const string Material = "Material";
    }

    public MakeHairMaterial(string RenderMode = "", object AlphaTexture = null, bool UseAlphaTexture = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float FresnelIOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTexture = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTexture = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MakeHairMaterial";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "RenderMode",
                    Type = "string",
                    Value = RenderMode,
                },
                new()
                {
                    Id = "AlphaTexture",
                    Type = "Resource<Texture>",
                    Value = AlphaTexture,
                },
                new()
                {
                    Id = "UseAlphaTexture",
                    Type = "boolean",
                    Value = UseAlphaTexture,
                },
                new()
                {
                    Id = "DiffuseTexture",
                    Type = "Resource<Texture>",
                    Value = DiffuseTexture,
                },
                new()
                {
                    Id = "BaseColor",
                    Type = "Color",
                    Value = BaseColor,
                },
                new()
                {
                    Id = "UseAlpha",
                    Type = "boolean",
                    Value = UseAlpha,
                },
                new()
                {
                    Id = "FresnelIOR",
                    Type = "float",
                    Value = FresnelIOR,
                },
                new()
                {
                    Id = "Opacity",
                    Type = "float",
                    Value = Opacity,
                },
                new()
                {
                    Id = "UseEmission",
                    Type = "boolean",
                    Value = UseEmission,
                },
                new()
                {
                    Id = "UseEmissiveTint",
                    Type = "boolean",
                    Value = UseEmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTexture",
                    Type = "Resource<Texture>",
                    Value = EmissiveTexture,
                },
                new()
                {
                    Id = "EmissiveColorBoost",
                    Type = "float",
                    Value = EmissiveColorBoost,
                },
                new()
                {
                    Id = "EmissiveTint",
                    Type = "Color",
                    Value = EmissiveTint,
                },
                new()
                {
                    Id = "EmissiveTintBoost",
                    Type = "float",
                    Value = EmissiveTintBoost,
                },
                new()
                {
                    Id = "UseNormalMap",
                    Type = "boolean",
                    Value = UseNormalMap,
                },
                new()
                {
                    Id = "NormalTexture",
                    Type = "Resource<Texture>",
                    Value = NormalTexture,
                },
                new()
                {
                    Id = "UseORM",
                    Type = "boolean",
                    Value = UseORM,
                },
                new()
                {
                    Id = "ORM",
                    Type = "Resource<Texture>",
                    Value = ORM,
                },
                new()
                {
                    Id = "Occlusion",
                    Type = "float",
                    Value = Occlusion,
                },
                new()
                {
                    Id = "Roughness",
                    Type = "float",
                    Value = Roughness,
                },
                new()
                {
                    Id = "Metallic",
                    Type = "float",
                    Value = Metallic,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Material",
                    Type = "Material",
                },
        };
    }
};

public class Add<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Add(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Add";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = typeT,
                },
        };
    }
};

public class Subtract<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Subtract(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Subtract";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = typeT,
                },
        };
    }
};

public class Multiply<T> : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Multiply(string typeT, T A = default, T B = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Multiply";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = typeT,
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = typeT,
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = typeT,
                },
        };
    }
};

public class GetJsonIntAttribute : Node
{
    public struct In
    {
          public const string Json = "Json";
          public const string AttributePath = "AttributePath";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GetJsonIntAttribute(string Json = "{}", string AttributePath = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetJsonIntAttribute";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                    Value = Json,
                },
                new()
                {
                    Id = "AttributePath",
                    Type = "string",
                    Value = AttributePath,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "int",
                },
        };
    }
};

public class GetJsonFloatAttribute : Node
{
    public struct In
    {
          public const string Json = "Json";
          public const string AttributePath = "AttributePath";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GetJsonFloatAttribute(string Json = "{}", string AttributePath = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetJsonFloatAttribute";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                    Value = Json,
                },
                new()
                {
                    Id = "AttributePath",
                    Type = "string",
                    Value = AttributePath,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "float",
                },
        };
    }
};

public class GetJsonBoolAttribute : Node
{
    public struct In
    {
          public const string Json = "Json";
          public const string AttributePath = "AttributePath";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GetJsonBoolAttribute(string Json = "{}", string AttributePath = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetJsonBoolAttribute";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                    Value = Json,
                },
                new()
                {
                    Id = "AttributePath",
                    Type = "string",
                    Value = AttributePath,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class GetJsonStringAttribute : Node
{
    public struct In
    {
          public const string Json = "Json";
          public const string AttributePath = "AttributePath";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GetJsonStringAttribute(string Json = "{}", string AttributePath = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetJsonStringAttribute";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                    Value = Json,
                },
                new()
                {
                    Id = "AttributePath",
                    Type = "string",
                    Value = AttributePath,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "string",
                },
        };
    }
};

public class GetJsonObjectAttribute : Node
{
    public struct In
    {
          public const string Json = "Json";
          public const string AttributePath = "AttributePath";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GetJsonObjectAttribute(string Json = "{}", string AttributePath = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetJsonObjectAttribute";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                    Value = Json,
                },
                new()
                {
                    Id = "AttributePath",
                    Type = "string",
                    Value = AttributePath,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "Json",
                },
        };
    }
};

public class GetJsonArrayAttribute : Node
{
    public struct In
    {
          public const string Json = "Json";
          public const string AttributePath = "AttributePath";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public GetJsonArrayAttribute(string Json = "{}", string AttributePath = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetJsonArrayAttribute";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                    Value = Json,
                },
                new()
                {
                    Id = "AttributePath",
                    Type = "string",
                    Value = AttributePath,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "Array<Json>",
                },
        };
    }
};

public class DeserializeJson : Node
{
    public struct In
    {
          public const string String = "String";
    }

    public struct Out
    {
          public const string Json = "Json";
          public const string Success = "Success";
    }

    public DeserializeJson(string String = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "DeserializeJson";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Json",
                    Type = "Json",
                },
                new()
                {
                    Id = "Success",
                    Type = "boolean",
                },
        };
    }
};

public class ParseInt : Node
{
    public struct In
    {
          public const string String = "String";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public ParseInt(string String = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "ParseInt";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "int",
                },
        };
    }
};

public class ParseFloat : Node
{
    public struct In
    {
          public const string String = "String";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public ParseFloat(string String = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "ParseFloat";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "float",
                },
        };
    }
};

public class ParseBool : Node
{
    public struct In
    {
          public const string String = "String";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public ParseBool(string String = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "ParseBool";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "boolean",
                },
        };
    }
};

public class MapValue<T, U> : Node
{
    public struct In
    {
          public const string Value = "Value";
          public const string Default = "Default";
          public const string Input = "Input";
          public const string Output = "Output";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public MapValue(string typeT, string typeU, T Value = default, U Default = default, List<T> Input = null, List<U> Output = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "MapValue";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = typeT,
                    Value = Value,
                },
                new()
                {
                    Id = "Default",
                    Type = typeU,
                    Value = Default,
                },
        }
            .Concat(
                (Input ?? new List<T>()).Select(
                    (i, index) => new Pin
                    {
                        Id = $"Input.{index + 1}",
                        Type = typeT,
                        Value = i,
                    }
                )
            )
            .Concat(
                (Output ?? new List<U>()).Select(
                    (i, index) => new Pin
                    {
                        Id = $"Output.{index + 1}",
                        Type = typeU,
                        Value = i,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = typeU,
                },
        };
    }
};

public class BindMeshes : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Meshes = "Meshes";
          public const string Rig = "Rig";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public BindMeshes(object Rig = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "BindMeshes";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Meshes",
                    Type = "Array<MeshRenderer>",
                    Value = null,
                },
                new()
                {
                    Id = "Rig",
                    Type = "Rig",
                    Value = Rig,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class CreateSceneNode : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Name = "Name";
          public const string Parent = "Parent";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
    }

    public CreateSceneNode(string Name = "", object Parent = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "CreateSceneNode";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Name",
                    Type = "string",
                    Value = Name,
                },
                new()
                {
                    Id = "Parent",
                    Type = "SceneNode",
                    Value = Parent,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                },
        };
    }
};

public class SetSceneNodeEnabled : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string Enabled = "Enabled";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public SetSceneNodeEnabled(object SceneNode = null, bool Enabled = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "SetSceneNodeEnabled";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
                new()
                {
                    Id = "Enabled",
                    Type = "boolean",
                    Value = Enabled,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class SpawnMesh : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Mesh = "Mesh";
          public const string Parent = "Parent";
          public const string Config = "Config";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string Renderer = "Renderer";
    }

    public SpawnMesh(object Mesh = null, object Parent = null, object Config = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "SpawnMesh";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Mesh",
                    Type = "Resource<Mesh>",
                    Value = Mesh,
                },
                new()
                {
                    Id = "Parent",
                    Type = "SceneNode",
                    Value = Parent,
                },
                new()
                {
                    Id = "Config",
                    Type = "MeshConfig",
                    Value = Config,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                },
                new()
                {
                    Id = "Renderer",
                    Type = "MeshRenderer",
                },
        };
    }
};

public class SpawnModel : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string GLB = "GLB";
          public const string Parent = "Parent";
          public const string Config = "Config";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string Renderers = "Renderers";
    }

    public SpawnModel(object GLB = null, object Parent = null, object Config = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "SpawnModel";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "GLB",
                    Type = "Resource<GLB>",
                    Value = GLB,
                },
                new()
                {
                    Id = "Parent",
                    Type = "SceneNode",
                    Value = Parent,
                },
                new()
                {
                    Id = "Config",
                    Type = "MeshConfig",
                    Value = Config,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                },
                new()
                {
                    Id = "Renderers",
                    Type = "Array<MeshRenderer>",
                },
        };
    }
};

public class SpawnModelWithLODs : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Meshes = "Meshes";
          public const string Parent = "Parent";
          public const string Config = "Config";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string Renderer = "Renderer";
    }

    public SpawnModelWithLODs(object Parent = null, object Config = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "SpawnModelWithLODs";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Meshes",
                    Type = "Array<Resource<Mesh>>",
                    Value = null,
                },
                new()
                {
                    Id = "Parent",
                    Type = "SceneNode",
                    Value = Parent,
                },
                new()
                {
                    Id = "Config",
                    Type = "MeshConfig",
                    Value = Config,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                },
                new()
                {
                    Id = "Renderer",
                    Type = "MeshRenderer",
                },
        };
    }
};

public class CreateMeshConfig<T> : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Resource = "Resource";
          public const string ConfigKey = "ConfigKey";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string MeshConfig = "MeshConfig";
    }

    public CreateMeshConfig(string typeT, T Resource = default, string ConfigKey = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "CreateMeshConfig";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Resource",
                    Type = typeT,
                    Value = Resource,
                },
                new()
                {
                    Id = "ConfigKey",
                    Type = "string",
                    Value = ConfigKey,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "MeshConfig",
                    Type = "MeshConfig",
                },
        };
    }
};

public class Append : Node
{
    public struct In
    {
          public const string A = "A";
          public const string B = "B";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Append(string A = "", string B = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "Append";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "A",
                    Type = "string",
                    Value = A,
                },
                new()
                {
                    Id = "B",
                    Type = "string",
                    Value = B,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "string",
                },
        };
    }
};

public class ToString<T> : Node
{
    public struct In
    {
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string String = "String";
    }

    public ToString(string typeT, T Value = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "ToString";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Value",
                    Type = typeT,
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                },
        };
    }
};

public class Contains : Node
{
    public struct In
    {
          public const string String = "String";
          public const string Substring = "Substring";
          public const string IgnoreCase = "IgnoreCase";
    }

    public struct Out
    {
          public const string Contains = "Contains";
    }

    public Contains(string String = "", string Substring = "", bool IgnoreCase = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Contains";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
                new()
                {
                    Id = "Substring",
                    Type = "string",
                    Value = Substring,
                },
                new()
                {
                    Id = "IgnoreCase",
                    Type = "boolean",
                    Value = IgnoreCase,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Contains",
                    Type = "boolean",
                },
        };
    }
};

public class ToUpper : Node
{
    public struct In
    {
          public const string String = "String";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public ToUpper(string String = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "ToUpper";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "string",
                },
        };
    }
};

public class FormatString : Node
{
    public struct In
    {
          public const string FormatString = "FormatString";
          public const string Item = "Item";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public FormatString(string FormatString = "", List<string> Item = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "FormatString";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "FormatString",
                    Type = "string",
                    Value = FormatString,
                },
        }
            .Concat(
                (Item ?? new List<string>()).Select(
                    (i, index) => new Pin
                    {
                        Id = $"Item.{index + 1}",
                        Type = "string",
                        Value = i,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "string",
                },
        };
    }
};

public class Split : Node
{
    public struct In
    {
          public const string String = "String";
          public const string Separator = "Separator";
    }

    public struct Out
    {
          public const string Parts = "Parts";
    }

    public Split(string String = "", string Separator = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "Split";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
                new()
                {
                    Id = "Separator",
                    Type = "string",
                    Value = Separator,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Parts",
                    Type = "Array<string>",
                },
        };
    }
};

public class Replace : Node
{
    public struct In
    {
          public const string String = "String";
          public const string ToReplace = "ToReplace";
          public const string Replacement = "Replacement";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public Replace(string String = "", string ToReplace = "", string Replacement = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "Replace";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
                new()
                {
                    Id = "ToReplace",
                    Type = "string",
                    Value = ToReplace,
                },
                new()
                {
                    Id = "Replacement",
                    Type = "string",
                    Value = Replacement,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "string",
                },
        };
    }
};

public class ToLower : Node
{
    public struct In
    {
          public const string String = "String";
    }

    public struct Out
    {
          public const string Result = "Result";
    }

    public ToLower(string String = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "ToLower";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "String",
                    Type = "string",
                    Value = String,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Result",
                    Type = "string",
                },
        };
    }
};

public class TransformPosition : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string WorldSpace = "WorldSpace";
          public const string Additive = "Additive";
          public const string Right = "Right";
          public const string Up = "Up";
          public const string Forward = "Forward";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public TransformPosition(object SceneNode = null, bool WorldSpace = false, bool Additive = false, float Right = 0f, float Up = 0f, float Forward = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "TransformPosition";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
                new()
                {
                    Id = "WorldSpace",
                    Type = "boolean",
                    Value = WorldSpace,
                },
                new()
                {
                    Id = "Additive",
                    Type = "boolean",
                    Value = Additive,
                },
                new()
                {
                    Id = "Right",
                    Type = "float",
                    Value = Right,
                },
                new()
                {
                    Id = "Up",
                    Type = "float",
                    Value = Up,
                },
                new()
                {
                    Id = "Forward",
                    Type = "float",
                    Value = Forward,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class TransformScale : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string Additive = "Additive";
          public const string Right = "Right";
          public const string Up = "Up";
          public const string Forward = "Forward";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public TransformScale(object SceneNode = null, bool Additive = false, float Right = 0f, float Up = 0f, float Forward = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "TransformScale";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
                new()
                {
                    Id = "Additive",
                    Type = "boolean",
                    Value = Additive,
                },
                new()
                {
                    Id = "Right",
                    Type = "float",
                    Value = Right,
                },
                new()
                {
                    Id = "Up",
                    Type = "float",
                    Value = Up,
                },
                new()
                {
                    Id = "Forward",
                    Type = "float",
                    Value = Forward,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class TransformRotation : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string WorldSpace = "WorldSpace";
          public const string Additive = "Additive";
          public const string Pitch = "Pitch";
          public const string Yaw = "Yaw";
          public const string Roll = "Roll";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public TransformRotation(object SceneNode = null, bool WorldSpace = false, bool Additive = false, float Pitch = 0f, float Yaw = 0f, float Roll = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "TransformRotation";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
                new()
                {
                    Id = "WorldSpace",
                    Type = "boolean",
                    Value = WorldSpace,
                },
                new()
                {
                    Id = "Additive",
                    Type = "boolean",
                    Value = Additive,
                },
                new()
                {
                    Id = "Pitch",
                    Type = "float",
                    Value = Pitch,
                },
                new()
                {
                    Id = "Yaw",
                    Type = "float",
                    Value = Yaw,
                },
                new()
                {
                    Id = "Roll",
                    Type = "float",
                    Value = Roll,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class SetBlendShape : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Renderer = "Renderer";
          public const string BlendShapeID = "BlendShapeID";
          public const string Value = "Value";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public SetBlendShape(object Renderer = null, string BlendShapeID = "", float Value = 0f)
    {
        Id = Guid.NewGuid().ToString();
        Type = "SetBlendShape";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Renderer",
                    Type = "MeshRenderer",
                    Value = Renderer,
                },
                new()
                {
                    Id = "BlendShapeID",
                    Type = "string",
                    Value = BlendShapeID,
                },
                new()
                {
                    Id = "Value",
                    Type = "float",
                    Value = Value,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class ExecuteBlueprint : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string Blueprint = "Blueprint";
          public const string InBindingID = "InBindingID";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string OutBindingID = "OutBindingID";
    }

    public ExecuteBlueprint(object Blueprint = null, Dictionary<string, object> InBindingID = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "ExecuteBlueprint";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "Blueprint",
                    Type = "Resource<Blueprint>",
                    Value = Blueprint,
                },
        }
            .Concat(
                (InBindingID ?? new Dictionary<string, object>()).Select(
                    (kvp) => new Pin
                    {
                        Id = kvp.Key,
                        Type = "unknown",
                        Value = kvp.Value,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "Out.{Binding ID}",
                    Type = "unknown",
                },
        };
    }
};

public class ExecuteFunction : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string FunctionID = "FunctionID";
          public const string InFunctionBindingID = "InFunctionBindingID";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string OutFunctionBindingID = "OutFunctionBindingID";
    }

    public ExecuteFunction(string FunctionID = "", Dictionary<string, object> InFunctionBindingID = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "ExecuteFunction";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "FunctionID",
                    Type = "string",
                    Value = FunctionID,
                },
        }
            .Concat(
                (InFunctionBindingID ?? new Dictionary<string, object>()).Select(
                    (kvp) => new Pin
                    {
                        Id = kvp.Key,
                        Type = "unknown",
                        Value = kvp.Value,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "Out.{Function Binding ID}",
                    Type = "unknown",
                },
        };
    }
};

public class Return : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string InFunctionBindingID = "InFunctionBindingID";
    }

    public struct Out
    {
    }

    public Return(Dictionary<string, object> InFunctionBindingID = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "Return";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
        }
            .Concat(
                (InFunctionBindingID ?? new Dictionary<string, object>()).Select(
                    (kvp) => new Pin
                    {
                        Id = kvp.Key,
                        Type = "unknown",
                        Value = kvp.Value,
                    }
                )
            )
            .ToList();
        Outputs = new List<Pin>
        {
        };
    }
};

public class CreateGLBResource : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string URI = "URI";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string GLB = "GLB";
    }

    public CreateGLBResource(string URI = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "CreateGLBResource";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "URI",
                    Type = "string",
                    Value = URI,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "GLB",
                    Type = "Resource<GLB>",
                },
        };
    }
};

public class CreateMeshResource : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string URI = "URI";
          public const string MeshID = "MeshID";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string Mesh = "Mesh";
    }

    public CreateMeshResource(string URI = "", string MeshID = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "CreateMeshResource";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "URI",
                    Type = "string",
                    Value = URI,
                },
                new()
                {
                    Id = "MeshID",
                    Type = "string",
                    Value = MeshID,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "Mesh",
                    Type = "Resource<Mesh>",
                },
        };
    }
};

public class CreateTextureResource : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string URI = "URI";
          public const string SRGB = "SRGB";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string Texture = "Texture";
    }

    public CreateTextureResource(string URI = "", bool SRGB = false)
    {
        Id = Guid.NewGuid().ToString();
        Type = "CreateTextureResource";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "URI",
                    Type = "string",
                    Value = URI,
                },
                new()
                {
                    Id = "SRGB",
                    Type = "boolean",
                    Value = SRGB,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "Texture",
                    Type = "Resource<Texture>",
                },
        };
    }
};

public class CreateBlueprintResource : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string URI = "URI";
    }

    public struct Out
    {
          public const string Exec = "Exec";
          public const string Blueprint = "Blueprint";
    }

    public CreateBlueprintResource(string URI = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "CreateBlueprintResource";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "URI",
                    Type = "string",
                    Value = URI,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
                new()
                {
                    Id = "Blueprint",
                    Type = "Resource<Blueprint>",
                },
        };
    }
};

public class FilterSceneObjects<T> : Node
{
    public struct In
    {
          public const string SceneObjects = "SceneObjects";
          public const string Filter = "Filter";
    }

    public struct Out
    {
          public const string Filtered = "Filtered";
    }

    public FilterSceneObjects(string typeT, string Filter = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "FilterSceneObjects";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneObjects",
                    Type = $"Array<{typeT}>",
                    Value = null,
                },
                new()
                {
                    Id = "Filter",
                    Type = "string",
                    Value = Filter,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Filtered",
                    Type = $"Array<{typeT}>",
                },
        };
    }
};

public class GetSceneObjectName<T> : Node
{
    public struct In
    {
          public const string SceneObject = "SceneObject";
    }

    public struct Out
    {
          public const string Name = "Name";
    }

    public GetSceneObjectName(string typeT, T SceneObject = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetSceneObjectName";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneObject",
                    Type = typeT,
                    Value = SceneObject,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Name",
                    Type = "string",
                },
        };
    }
};

public class GetSceneComponents<T> : Node
{
    public struct In
    {
          public const string SceneNode = "SceneNode";
          public const string Type = "Type";
    }

    public struct Out
    {
          public const string SceneComponents = "SceneComponents";
    }

    public GetSceneComponents(string typeT, object SceneNode = null, string Type = "")
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetSceneComponents";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
                new()
                {
                    Id = "Type",
                    Type = "string",
                    Value = Type,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneComponents",
                    Type = $"Array<{typeT}>",
                },
        };
    }
};

public class GetSceneNode<T> : Node
{
    public struct In
    {
          public const string SceneComponent = "SceneComponent";
    }

    public struct Out
    {
          public const string SceneNode = "SceneNode";
    }

    public GetSceneNode(string typeT, T SceneComponent = default)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetSceneNode";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneComponent",
                    Type = typeT,
                    Value = SceneComponent,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                },
        };
    }
};

public class GetParentSceneNode : Node
{
    public struct In
    {
          public const string SceneNode = "SceneNode";
    }

    public struct Out
    {
          public const string Parent = "Parent";
    }

    public GetParentSceneNode(object SceneNode = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetParentSceneNode";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Parent",
                    Type = "SceneNode",
                },
        };
    }
};

public class GetChildSceneNodes : Node
{
    public struct In
    {
          public const string SceneNode = "SceneNode";
    }

    public struct Out
    {
          public const string Children = "Children";
    }

    public GetChildSceneNodes(object SceneNode = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetChildSceneNodes";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Children",
                    Type = "Array<SceneNode>",
                },
        };
    }
};

public class AttachSceneNode : Node
{
    public struct In
    {
          public const string Exec = "Exec";
          public const string SceneNode = "SceneNode";
          public const string Parent = "Parent";
    }

    public struct Out
    {
          public const string Exec = "Exec";
    }

    public AttachSceneNode(object SceneNode = null, object Parent = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "AttachSceneNode";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                    Value = null,
                },
                new()
                {
                    Id = "SceneNode",
                    Type = "SceneNode",
                    Value = SceneNode,
                },
                new()
                {
                    Id = "Parent",
                    Type = "SceneNode",
                    Value = Parent,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Exec",
                    Type = "exec",
                },
        };
    }
};

public class GetRigRootBone : Node
{
    public struct In
    {
          public const string Rig = "Rig";
    }

    public struct Out
    {
          public const string RootBone = "RootBone";
    }

    public GetRigRootBone(object Rig = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetRigRootBone";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Rig",
                    Type = "Rig",
                    Value = Rig,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "RootBone",
                    Type = "SceneNode",
                },
        };
    }
};

public class GetRigBones : Node
{
    public struct In
    {
          public const string Rig = "Rig";
    }

    public struct Out
    {
          public const string Bones = "Bones";
    }

    public GetRigBones(object Rig = null)
    {
        Id = Guid.NewGuid().ToString();
        Type = "GetRigBones";
        Inputs = new List<Pin>
        {
                new()
                {
                    Id = "Rig",
                    Type = "Rig",
                    Value = Rig,
                },
        };
        Outputs = new List<Pin>
        {
                new()
                {
                    Id = "Bones",
                    Type = "Array<SceneNode>",
                },
        };
    }
};
// Copyright (c) 2025, Futureverse Corporation Limited. All rights reserved.
//
// WARNING - DO NOT EDIT
// This file was generated by fv-ubf-standard cs-gen.ts.
//

using System.Collections.Generic;
using System.Linq;

// ReSharper disable RedundantEmptyObjectOrCollectionInitializer
// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable InconsistentNaming

namespace UnitTests.PlayModeTests.Utils
{
        public partial class TestGraphBuilder
        {

        public static Node First<T>(string id, string typeT)
            => new()
            {
                Id = id,
                Type = "First",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Element",
                        Type = typeT,
                    },
                },
        };

        public static Node AtIndex<T>(string id, string typeT, int Index = 0)
            => new()
            {
                Id = id,
                Type = "AtIndex",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Index",
                        Type = "int",
                        Value = Index,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Element",
                        Type = typeT,
                    },
                },
        };

        public static Node Pick<T>(string id, string typeT, T A = default, T B = default, bool PickA = false)
            => new()
            {
                Id = id,
                Type = "Pick",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                    new()
                    {
                        Id = "Pick A?",
                        Type = "boolean",
                        Value = PickA,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                    },
                },
        };

        public static Node ForEach<T>(string id, string typeT)
            => new()
            {
                Id = id,
                Type = "ForEach",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                        Value = null,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Loop Body",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Array Element",
                        Type = typeT,
                    },
                    new()
                    {
                        Id = "Array Index",
                        Type = "int",
                    },
                },
        };

        public static Node MakeArray<T>(string id, string typeT, List<T> Item = null)
            => new()
            {
                Id = id,
                Type = "MakeArray",
                Inputs = new List<Pin>
                {
                }
                .Concat(
                    (Item ?? new List<T>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Item.{index + 1}",
                            Type = typeT,
                            Value = i,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = $"Array<{typeT}>",
                    },
                },
        };

        public static Node Set(string id, object Input = null, object Value = null)
            => new()
            {
                Id = id,
                Type = "Set",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Input",
                        Type = "unknown",
                        Value = Input,
                    },
                    new()
                    {
                        Id = "Value",
                        Type = "unknown",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node Input<T>(string id, string typeT, object Input = null)
            => new()
            {
                Id = id,
                Type = "Input",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "unknown",
                        Value = Input,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                    },
                },
        };

        public static Node Output(string id, Dictionary<string, object> OutBindingID = null)
            => new()
            {
                Id = id,
                Type = "Output",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                }
                .Concat(
                    (OutBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node Entry(string id)
            => new()
            {
                Id = id,
                Type = "Entry",
                Inputs = new List<Pin>
                {
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node DebugLog(string id, string Message = "")
            => new()
            {
                Id = id,
                Type = "DebugLog",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Message",
                        Type = "string",
                        Value = Message,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node BoolLiteral(string id, bool Value = false)
            => new()
            {
                Id = id,
                Type = "BoolLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "boolean",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Bool",
                        Type = "boolean",
                    },
                },
        };

        public static Node IntLiteral(string id, int Value = 0)
            => new()
            {
                Id = id,
                Type = "IntLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "int",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Int",
                        Type = "int",
                    },
                },
        };

        public static Node FloatLiteral(string id, float Value = 0f)
            => new()
            {
                Id = id,
                Type = "FloatLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "float",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Float",
                        Type = "float",
                    },
                },
        };

        public static Node ColorLiteral(string id, float R = 0f, float G = 0f, float B = 0f, float A = 0f)
            => new()
            {
                Id = id,
                Type = "ColorLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "R",
                        Type = "float",
                        Value = R,
                    },
                    new()
                    {
                        Id = "G",
                        Type = "float",
                        Value = G,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "float",
                        Value = B,
                    },
                    new()
                    {
                        Id = "A",
                        Type = "float",
                        Value = A,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Color",
                        Type = "Color",
                    },
                },
        };

        public static Node StringLiteral(string id, string Value = "")
            => new()
            {
                Id = id,
                Type = "StringLiteral",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "string",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                    },
                },
        };

        public static Node And(string id, bool A = false, bool B = false)
            => new()
            {
                Id = id,
                Type = "And",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "boolean",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Or(string id, bool A = false, bool B = false)
            => new()
            {
                Id = id,
                Type = "Or",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "boolean",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Xor(string id, bool A = false, bool B = false)
            => new()
            {
                Id = id,
                Type = "Xor",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "boolean",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Not(string id, bool A = false)
            => new()
            {
                Id = id,
                Type = "Not",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "boolean",
                        Value = A,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node Branch(string id, bool Condition = false)
            => new()
            {
                Id = id,
                Type = "Branch",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Condition",
                        Type = "boolean",
                        Value = Condition,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "True",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "False",
                        Type = "exec",
                    },
                },
        };

        public static Node Equals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Equals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node NotEquals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "NotEquals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node GreaterThan<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "GreaterThan",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node LessThan<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "LessThan",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node GreaterThanOrEquals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "GreaterThanOrEquals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node LessThanOrEquals<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "LessThanOrEquals",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "boolean",
                    },
                },
        };

        public static Node IsNull<T>(string id, string typeT, T Value = default)
            => new()
            {
                Id = id,
                Type = "IsNull",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "IsNull",
                        Type = "boolean",
                    },
                },
        };

        public static Node ApplyMaterial(string id, int Index = 0, object Renderer = null, object Material = null)
            => new()
            {
                Id = id,
                Type = "ApplyMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Index",
                        Type = "int",
                        Value = Index,
                    },
                    new()
                    {
                        Id = "Renderer",
                        Type = "MeshRenderer",
                        Value = Renderer,
                    },
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                        Value = Material,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node MakePBRMaterial(string id, string RenderMode = "", object AlphaTex = null, bool UseAlphaTex = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float Fresnel_IOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTex = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTex = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f)
            => new()
            {
                Id = id,
                Type = "MakePBRMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Render Mode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "AlphaTex",
                        Type = "Resource<Texture>",
                        Value = AlphaTex,
                    },
                    new()
                    {
                        Id = "UseAlphaTex",
                        Type = "boolean",
                        Value = UseAlphaTex,
                    },
                    new()
                    {
                        Id = "Diffuse Texture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "Base Color",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "Use Alpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "Fresnel_IOR",
                        Type = "float",
                        Value = Fresnel_IOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "Use Emission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "Use Emissive Tint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "Emissive Tex",
                        Type = "Resource<Texture>",
                        Value = EmissiveTex,
                    },
                    new()
                    {
                        Id = "Emissive Color Boost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "Emissive Tint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "Emissive Tint Boost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "Use Normal Map",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "Normal Tex",
                        Type = "Resource<Texture>",
                        Value = NormalTex,
                    },
                    new()
                    {
                        Id = "Use ORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeSkinMaterial(string id, object GCLSTex = null, object NormalTex = null, object ORSTex = null, string SkinColor = "#000000", string Redness = "#000000", string LipColor = "#000000", float SkinVariation = 0f, float DarkAreaHue = 0f, float DarkAreaSaturation = 0f, float DarkAreaValue = 0f, float RoughnessStrength = 0f, float AOStrength = 0f, object BuzzcutTex = null, object StubbleTex = null, object FrecklesTex = null, object MolesTex = null, object ScarsTex = null, string HairColor = "#000000", string FreckleColor = "#000000", string MoleColor = "#000000", string ScarColor = "#000000", float StubbleGrowth = 0f, float StubbleContrast = 0f, float MoleNormalStrength = 0f, float ScarColorContrast = 0f, float ScarColorFalloff = 0f, float ScarNormalStrength = 0f)
            => new()
            {
                Id = id,
                Type = "MakeSkinMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "GCLS Tex",
                        Type = "Resource<Texture>",
                        Value = GCLSTex,
                    },
                    new()
                    {
                        Id = "Normal Tex",
                        Type = "Resource<Texture>",
                        Value = NormalTex,
                    },
                    new()
                    {
                        Id = "ORS Tex",
                        Type = "Resource<Texture>",
                        Value = ORSTex,
                    },
                    new()
                    {
                        Id = "Skin Color",
                        Type = "Color",
                        Value = SkinColor,
                    },
                    new()
                    {
                        Id = "Redness",
                        Type = "Color",
                        Value = Redness,
                    },
                    new()
                    {
                        Id = "Lip Color",
                        Type = "Color",
                        Value = LipColor,
                    },
                    new()
                    {
                        Id = "Skin Variation",
                        Type = "float",
                        Value = SkinVariation,
                    },
                    new()
                    {
                        Id = "Dark Area Hue",
                        Type = "float",
                        Value = DarkAreaHue,
                    },
                    new()
                    {
                        Id = "Dark Area Saturation",
                        Type = "float",
                        Value = DarkAreaSaturation,
                    },
                    new()
                    {
                        Id = "Dark Area Value",
                        Type = "float",
                        Value = DarkAreaValue,
                    },
                    new()
                    {
                        Id = "Roughness Strength",
                        Type = "float",
                        Value = RoughnessStrength,
                    },
                    new()
                    {
                        Id = "AO Strength",
                        Type = "float",
                        Value = AOStrength,
                    },
                    new()
                    {
                        Id = "Buzzcut Tex",
                        Type = "Resource<Texture>",
                        Value = BuzzcutTex,
                    },
                    new()
                    {
                        Id = "Stubble Tex",
                        Type = "Resource<Texture>",
                        Value = StubbleTex,
                    },
                    new()
                    {
                        Id = "Freckles Tex",
                        Type = "Resource<Texture>",
                        Value = FrecklesTex,
                    },
                    new()
                    {
                        Id = "Moles Tex",
                        Type = "Resource<Texture>",
                        Value = MolesTex,
                    },
                    new()
                    {
                        Id = "Scars Tex",
                        Type = "Resource<Texture>",
                        Value = ScarsTex,
                    },
                    new()
                    {
                        Id = "Hair Color",
                        Type = "Color",
                        Value = HairColor,
                    },
                    new()
                    {
                        Id = "Freckle Color",
                        Type = "Color",
                        Value = FreckleColor,
                    },
                    new()
                    {
                        Id = "Mole Color",
                        Type = "Color",
                        Value = MoleColor,
                    },
                    new()
                    {
                        Id = "Scar Color",
                        Type = "Color",
                        Value = ScarColor,
                    },
                    new()
                    {
                        Id = "Stubble Growth",
                        Type = "float",
                        Value = StubbleGrowth,
                    },
                    new()
                    {
                        Id = "Stubble Contrast",
                        Type = "float",
                        Value = StubbleContrast,
                    },
                    new()
                    {
                        Id = "Mole Normal Strength",
                        Type = "float",
                        Value = MoleNormalStrength,
                    },
                    new()
                    {
                        Id = "Scar Color Contrast",
                        Type = "float",
                        Value = ScarColorContrast,
                    },
                    new()
                    {
                        Id = "Scar Color Falloff",
                        Type = "float",
                        Value = ScarColorFalloff,
                    },
                    new()
                    {
                        Id = "Scar Normal Strength",
                        Type = "float",
                        Value = ScarNormalStrength,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node MakeFurMaterial(string id, string RenderMode = "", object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float Fresnel_IOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTex = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTex = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f, object HeightMap = null, object IdMap = null)
            => new()
            {
                Id = id,
                Type = "MakeFurMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Render Mode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "Diffuse Texture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "Base Color",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "Use Alpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "Fresnel_IOR",
                        Type = "float",
                        Value = Fresnel_IOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "Use Emission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "Use Emissive Tint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "Emissive Tex",
                        Type = "Resource<Texture>",
                        Value = EmissiveTex,
                    },
                    new()
                    {
                        Id = "Emissive Color Boost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "Emissive Tint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "Emissive Tint Boost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "Use Normal Map",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "Normal Tex",
                        Type = "Resource<Texture>",
                        Value = NormalTex,
                    },
                    new()
                    {
                        Id = "Use ORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                    new()
                    {
                        Id = "Height Map",
                        Type = "Resource<Texture>",
                        Value = HeightMap,
                    },
                    new()
                    {
                        Id = "Id Map",
                        Type = "Resource<Texture>",
                        Value = IdMap,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node SetTextureSettings(string id, object TextureResource = null, bool sRGB = false)
            => new()
            {
                Id = id,
                Type = "SetTextureSettings",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Texture Resource",
                        Type = "Resource<Texture>",
                        Value = TextureResource,
                    },
                    new()
                    {
                        Id = "sRGB",
                        Type = "boolean",
                        Value = sRGB,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Texture",
                        Type = "Resource<Texture>",
                    },
                },
        };

        public static Node MakeHairMaterial(string id, string RenderMode = "", object AlphaTex = null, bool UseAlphaTex = false, object DiffuseTexture = null, string BaseColor = "#000000", bool UseAlpha = false, float Fresnel_IOR = 0f, float Opacity = 0f, bool UseEmission = false, bool UseEmissiveTint = false, object EmissiveTex = null, float EmissiveColorBoost = 0f, string EmissiveTint = "#000000", float EmissiveTintBoost = 0f, bool UseNormalMap = false, object NormalTex = null, bool UseORM = false, object ORM = null, float Occlusion = 0f, float Roughness = 0f, float Metallic = 0f)
            => new()
            {
                Id = id,
                Type = "MakeHairMaterial",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Render Mode",
                        Type = "string",
                        Value = RenderMode,
                    },
                    new()
                    {
                        Id = "AlphaTex",
                        Type = "Resource<Texture>",
                        Value = AlphaTex,
                    },
                    new()
                    {
                        Id = "UseAlphaTex",
                        Type = "boolean",
                        Value = UseAlphaTex,
                    },
                    new()
                    {
                        Id = "Diffuse Texture",
                        Type = "Resource<Texture>",
                        Value = DiffuseTexture,
                    },
                    new()
                    {
                        Id = "Base Color",
                        Type = "Color",
                        Value = BaseColor,
                    },
                    new()
                    {
                        Id = "Use Alpha",
                        Type = "boolean",
                        Value = UseAlpha,
                    },
                    new()
                    {
                        Id = "Fresnel_IOR",
                        Type = "float",
                        Value = Fresnel_IOR,
                    },
                    new()
                    {
                        Id = "Opacity",
                        Type = "float",
                        Value = Opacity,
                    },
                    new()
                    {
                        Id = "Use Emission",
                        Type = "boolean",
                        Value = UseEmission,
                    },
                    new()
                    {
                        Id = "Use Emissive Tint",
                        Type = "boolean",
                        Value = UseEmissiveTint,
                    },
                    new()
                    {
                        Id = "Emissive Tex",
                        Type = "Resource<Texture>",
                        Value = EmissiveTex,
                    },
                    new()
                    {
                        Id = "Emissive Color Boost",
                        Type = "float",
                        Value = EmissiveColorBoost,
                    },
                    new()
                    {
                        Id = "Emissive Tint",
                        Type = "Color",
                        Value = EmissiveTint,
                    },
                    new()
                    {
                        Id = "Emissive Tint Boost",
                        Type = "float",
                        Value = EmissiveTintBoost,
                    },
                    new()
                    {
                        Id = "Use Normal Map",
                        Type = "boolean",
                        Value = UseNormalMap,
                    },
                    new()
                    {
                        Id = "Normal Tex",
                        Type = "Resource<Texture>",
                        Value = NormalTex,
                    },
                    new()
                    {
                        Id = "Use ORM",
                        Type = "boolean",
                        Value = UseORM,
                    },
                    new()
                    {
                        Id = "ORM",
                        Type = "Resource<Texture>",
                        Value = ORM,
                    },
                    new()
                    {
                        Id = "Occlusion",
                        Type = "float",
                        Value = Occlusion,
                    },
                    new()
                    {
                        Id = "Roughness",
                        Type = "float",
                        Value = Roughness,
                    },
                    new()
                    {
                        Id = "Metallic",
                        Type = "float",
                        Value = Metallic,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Material",
                        Type = "Material",
                    },
                },
        };

        public static Node Add<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Add",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                    },
                },
        };

        public static Node Subtract<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Subtract",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                    },
                },
        };

        public static Node Multiply<T>(string id, string typeT, T A = default, T B = default)
            => new()
            {
                Id = id,
                Type = "Multiply",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = typeT,
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = typeT,
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                    },
                },
        };

        public static Node GetJsonIntAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonIntAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "int",
                    },
                },
        };

        public static Node GetJsonFloatAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonFloatAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "float",
                    },
                },
        };

        public static Node GetJsonBoolAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonBoolAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "boolean",
                    },
                },
        };

        public static Node GetJsonStringAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonStringAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "string",
                    },
                },
        };

        public static Node GetJsonObjectAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonObjectAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "Json",
                    },
                },
        };

        public static Node GetJsonArrayAttribute(string id, string Json = "{}", string AttributePath = "")
            => new()
            {
                Id = id,
                Type = "GetJsonArrayAttribute",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                        Value = Json,
                    },
                    new()
                    {
                        Id = "AttributePath",
                        Type = "string",
                        Value = AttributePath,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = "Array<Json>",
                    },
                },
        };

        public static Node DeserializeJson(string id, string String = "")
            => new()
            {
                Id = id,
                Type = "DeserializeJson",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Json",
                        Type = "Json",
                    },
                    new()
                    {
                        Id = "Success",
                        Type = "boolean",
                    },
                },
        };

        public static Node ParseInt(string id, string Input = "")
            => new()
            {
                Id = id,
                Type = "ParseInt",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = "int",
                    },
                },
        };

        public static Node ParseFloat(string id, string Input = "")
            => new()
            {
                Id = id,
                Type = "ParseFloat",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = "float",
                    },
                },
        };

        public static Node ParseBool(string id, string Input = "")
            => new()
            {
                Id = id,
                Type = "ParseBool",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = "boolean",
                    },
                },
        };

        public static Node MapValue<T, U>(string id, string typeT, string typeU, T Value = default, U Default = default, List<T> Input = null, List<U> Output = null)
            => new()
            {
                Id = id,
                Type = "MapValue",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                        Value = Value,
                    },
                    new()
                    {
                        Id = "Default",
                        Type = typeU,
                        Value = Default,
                    },
                }
                .Concat(
                    (Input ?? new List<T>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Input.{index + 1}",
                            Type = typeT,
                            Value = i,
                        }
                    )
                )
                .Concat(
                    (Output ?? new List<U>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Output.{index + 1}",
                            Type = typeU,
                            Value = i,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = typeU,
                    },
                },
        };

        public static Node BindMeshes(string id, object Skeleton = null)
            => new()
            {
                Id = id,
                Type = "BindMeshes",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Mesh",
                        Type = "Array<MeshRenderer>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Skeleton",
                        Type = "MeshRenderer",
                        Value = Skeleton,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node FindSceneNodes(string id, object Root = null, string Filter = "")
            => new()
            {
                Id = id,
                Type = "FindSceneNodes",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Root",
                        Type = "SceneNode",
                        Value = Root,
                    },
                    new()
                    {
                        Id = "Filter",
                        Type = "string",
                        Value = Filter,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Nodes",
                        Type = "Array<SceneNode>",
                    },
                },
        };

        public static Node CreateSceneNode(string id, string Name = "", object Parent = null)
            => new()
            {
                Id = id,
                Type = "CreateSceneNode",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Name",
                        Type = "string",
                        Value = Name,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Node",
                        Type = "SceneNode",
                    },
                },
        };

        public static Node FindRenderer(string id, string Name = "")
            => new()
            {
                Id = id,
                Type = "FindRenderer",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = "Array<MeshRenderer>",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Name",
                        Type = "string",
                        Value = Name,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Renderer",
                        Type = "MeshRenderer",
                    },
                },
        };

        public static Node SetSceneNodeEnabled(string id, object Node = null, bool Enabled = false)
            => new()
            {
                Id = id,
                Type = "SetSceneNodeEnabled",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Node",
                        Type = "SceneNode",
                        Value = Node,
                    },
                    new()
                    {
                        Id = "Enabled",
                        Type = "boolean",
                        Value = Enabled,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node SpawnMesh(string id, object Resource = null, object Parent = null, object Config = null)
            => new()
            {
                Id = id,
                Type = "SpawnMesh",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Resource",
                        Type = "Resource<Mesh>",
                        Value = Resource,
                    },
                    new()
                    {
                        Id = "Parent",
                        Type = "SceneNode",
                        Value = Parent,
                    },
                    new()
                    {
                        Id = "Config",
                        Type = "MeshConfig",
                        Value = Config,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "Scene Nodes",
                        Type = "Array<SceneNode>",
                    },
                    new()
                    {
                        Id = "Renderers",
                        Type = "Array<MeshRenderer>",
                    },
                },
        };

        public static Node CreateMeshConfig(string id, object Resource = null, string ConfigOverrideKey = "")
            => new()
            {
                Id = id,
                Type = "CreateMeshConfig",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Resource",
                        Type = "Resource<Mesh>",
                        Value = Resource,
                    },
                    new()
                    {
                        Id = "ConfigOverrideKey",
                        Type = "string",
                        Value = ConfigOverrideKey,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "MeshConfig",
                        Type = "MeshConfig",
                    },
                },
        };

        public static Node Append(string id, string A = "", string B = "")
            => new()
            {
                Id = id,
                Type = "Append",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "A",
                        Type = "string",
                        Value = A,
                    },
                    new()
                    {
                        Id = "B",
                        Type = "string",
                        Value = B,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                    },
                },
        };

        public static Node ToString<T>(string id, string typeT, T Value = default)
            => new()
            {
                Id = id,
                Type = "ToString",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Value",
                        Type = typeT,
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                    },
                },
        };

        public static Node Contains(string id, string String = "", string Substring = "", bool IgnoreCase = false)
            => new()
            {
                Id = id,
                Type = "Contains",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                    new()
                    {
                        Id = "Substring",
                        Type = "string",
                        Value = Substring,
                    },
                    new()
                    {
                        Id = "IgnoreCase",
                        Type = "boolean",
                        Value = IgnoreCase,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Matches",
                        Type = "boolean",
                    },
                },
        };

        public static Node ToUpper(string id, string Input = "")
            => new()
            {
                Id = id,
                Type = "ToUpper",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = "string",
                    },
                },
        };

        public static Node FormatString(string id, string Input = "", List<string> Item = null)
            => new()
            {
                Id = id,
                Type = "FormatString",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                }
                .Concat(
                    (Item ?? new List<string>()).Select(
                        (i, index) => new Pin
                        {
                            Id = $"Item.{index + 1}",
                            Type = "string",
                            Value = i,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Result",
                        Type = "string",
                    },
                },
        };

        public static Node Split(string id, string String = "", string Separator = "")
            => new()
            {
                Id = id,
                Type = "Split",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "String",
                        Type = "string",
                        Value = String,
                    },
                    new()
                    {
                        Id = "Separator",
                        Type = "string",
                        Value = Separator,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Array",
                        Type = "Array<string>",
                    },
                },
        };

        public static Node Replace(string id, string Input = "", string ToReplace = "", string Replacement = "")
            => new()
            {
                Id = id,
                Type = "Replace",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                    new()
                    {
                        Id = "ToReplace",
                        Type = "string",
                        Value = ToReplace,
                    },
                    new()
                    {
                        Id = "Replacement",
                        Type = "string",
                        Value = Replacement,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = "string",
                    },
                },
        };

        public static Node ToLower(string id, string Input = "")
            => new()
            {
                Id = id,
                Type = "ToLower",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Input",
                        Type = "string",
                        Value = Input,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Output",
                        Type = "string",
                    },
                },
        };

        public static Node TransformPosition(string id, object TransformObject = null, bool UseWorldSpace = false, bool IsAdditive = false, float Right = 0f, float Up = 0f, float Forward = 0f)
            => new()
            {
                Id = id,
                Type = "TransformPosition",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Transform Object",
                        Type = "SceneNode",
                        Value = TransformObject,
                    },
                    new()
                    {
                        Id = "Use World Space",
                        Type = "boolean",
                        Value = UseWorldSpace,
                    },
                    new()
                    {
                        Id = "Is Additive",
                        Type = "boolean",
                        Value = IsAdditive,
                    },
                    new()
                    {
                        Id = "Right",
                        Type = "float",
                        Value = Right,
                    },
                    new()
                    {
                        Id = "Up",
                        Type = "float",
                        Value = Up,
                    },
                    new()
                    {
                        Id = "Forward",
                        Type = "float",
                        Value = Forward,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node TransformScale(string id, object TransformObject = null, bool IsAdditive = false, float Right = 0f, float Up = 0f, float Forward = 0f)
            => new()
            {
                Id = id,
                Type = "TransformScale",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Transform Object",
                        Type = "SceneNode",
                        Value = TransformObject,
                    },
                    new()
                    {
                        Id = "Is Additive",
                        Type = "boolean",
                        Value = IsAdditive,
                    },
                    new()
                    {
                        Id = "Right",
                        Type = "float",
                        Value = Right,
                    },
                    new()
                    {
                        Id = "Up",
                        Type = "float",
                        Value = Up,
                    },
                    new()
                    {
                        Id = "Forward",
                        Type = "float",
                        Value = Forward,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node TransformRotation(string id, object TransformObject = null, bool UseWorldSpace = false, bool IsAdditive = false, float Pitch = 0f, float Yaw = 0f, float Roll = 0f)
            => new()
            {
                Id = id,
                Type = "TransformRotation",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Transform Object",
                        Type = "SceneNode",
                        Value = TransformObject,
                    },
                    new()
                    {
                        Id = "Use World Space",
                        Type = "boolean",
                        Value = UseWorldSpace,
                    },
                    new()
                    {
                        Id = "Is Additive",
                        Type = "boolean",
                        Value = IsAdditive,
                    },
                    new()
                    {
                        Id = "Pitch",
                        Type = "float",
                        Value = Pitch,
                    },
                    new()
                    {
                        Id = "Yaw",
                        Type = "float",
                        Value = Yaw,
                    },
                    new()
                    {
                        Id = "Roll",
                        Type = "float",
                        Value = Roll,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node SetBlendShape(string id, object Target = null, string ID = "", float Value = 0f)
            => new()
            {
                Id = id,
                Type = "SetBlendshape",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Target",
                        Type = "MeshRenderer",
                        Value = Target,
                    },
                    new()
                    {
                        Id = "ID",
                        Type = "string",
                        Value = ID,
                    },
                    new()
                    {
                        Id = "Value",
                        Type = "float",
                        Value = Value,
                    },
                },
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                },
        };

        public static Node ExecuteBlueprint2(string id, object Blueprint = null, Dictionary<string, object> BindingID = null)
            => new()
            {
                Id = id,
                Type = "ExecuteBlueprint2",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Blueprint",
                        Type = "Resource<Blueprint>",
                        Value = Blueprint,
                    },
                }
                .Concat(
                    (BindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "{Binding ID}",
                        Type = "unknown",
                    },
                },
        };

        public static Node Fn(string id, string Graph = "", Dictionary<string, object> FunctionBindingID = null)
            => new()
            {
                Id = id,
                Type = "Fn",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                    new()
                    {
                        Id = "Graph",
                        Type = "string",
                        Value = Graph,
                    },
                }
                .Concat(
                    (FunctionBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                    },
                    new()
                    {
                        Id = "{Function Binding ID}",
                        Type = "unknown",
                    },
                },
        };

        public static Node Return(string id, Dictionary<string, object> FunctionBindingID = null)
            => new()
            {
                Id = id,
                Type = "Return",
                Inputs = new List<Pin>
                {
                    new()
                    {
                        Id = "Exec",
                        Type = "exec",
                        Value = null,
                    },
                }
                .Concat(
                    (FunctionBindingID ?? new Dictionary<string, object>()).Select(
                        (kvp) => new Pin
                        {
                            Id = kvp.Key,
                            Type = "unknown",
                            Value = kvp.Value,
                        }
                    )
                )
                .ToList(),
                Outputs = new List<Pin>
                {
                },
        };

    }
}